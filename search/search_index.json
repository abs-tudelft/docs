{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Saving hardware design effort \u2013 documentation","text":"<p>At the Accelerated Big Data Systems group we are committed to build develop tools and implementations that push the envelope for accelerating computational tasks. This documentation website contains our projects related to digital hardware design. These tools tackle the challenges that make digital hardware design difficult. Our motto is therefore:</p> <p>Digital hardware design is hard enough as it is, why should the tooling hold you back?</p>"},{"location":"#projects","title":"Projects","text":"<p>This website contains documentation for the following projects (plus some extra bits).</p>"},{"location":"#better-waveforms","title":"Better waveforms","text":"<p>Tywaves is a type-aware waveform viewer that bridges the gap between high-level Chisel designs and low-level RTL debugging. By preserving source code structure, types, and module hierarchies, Tywaves enables intuitive, efficient debugging directly aligned with your original Chisel code\u2014no more deciphering auto-generated RTL. Fully compatible with ChiselSim and demonstrated on the ChiselWatt OpenPOWER processor, Tywaves redefines how you visualize and debug hardware designs.</p> <p>Discover Tywaves </p>"},{"location":"#get-insight-in-your-signal-dependencies","title":"Get insight in your signal dependencies","text":"<p>ChiselTrace is a tool that allows you to trace back signal dependencies in a source-language view. When a value is wrong or an assertion fails, it builds a causal execution history\u2014revealing how that value was computed.</p> <p>By combining static PDG and CFG from FIRRTL with simulation data, ChiselTrace creates an interactive graph of control and data flow between Chisel statements, complete with typed data flow. This makes debugging faster, more intuitive, and focused directly on the source.</p> <p>Discover ChiselTrace </p>"},{"location":"#communicate-complex-data-between-components-like-a-breeze","title":"Communicate complex data between components \u2013 like a breeze","text":"<p>Tydi (Typed Dataflow Interface) is a specification that provides the same maturity for defining complex component interfaces, as modern HSL paradigms provide for building the components. In conjunction with modern trends, it provides:</p> <ol> <li>A Type system for defining complex, variable data structures,</li> <li>Formally verified data transmission methodology,</li> <li>Interface HDL generators for Chisel, VHDL, Verilog, etc, and</li> <li>Engineering parameters to fine-tune that interface. </li> </ol> <p>Discover Tydi</p>"},{"location":"mkdocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"debugtools/chiseltrace/","title":"Automated Dependency Analysis with ChiselTrace","text":"<p>Debugging hardware designs often feels like searching for a needle in a haystack. Traditional waveform viewers force engineers to manually trace signals through complex hierarchical designs. This task is error-prone and often leads to long debug sessions.</p> <p>Tywaves is able to reconstruct Chisel constructs in the waveform viewer. We take this one step further and provide automation of dependency tracing at the source-language level using ChiselTrace. When the user notices a wrong value in the waveform viewer or through a failed assertion, the entire execution history that led to the wrong value can be reconstructed automatically, allowing the developer to more easily trace signal relations and find the fault.</p> <p>ChiselTrace reconstructs source-level control and data flow from Chisel designs, combining static program dependence graphs with dynamic simulation data. The result is a causal graph that shows relations between Chisel statements over time. ChiselTrace even integrates with the Tywaves library to show typed data flow between statements.</p> <p></p>"},{"location":"debugtools/chiseltrace/#how-does-it-work","title":"How does it work?","text":"<ol> <li>A custom phase in the Chisel library collects a PDG and CFG from the FIRRTL circuit, while inserting probes into the circuit</li> <li>Using this information in conjunction with simulation data, ChiselTrace reconstructs control flow</li> <li>A Dynamic PDG is built and the Chisel view is reconstructed</li> <li>The generated DPDG is shown in our causal dependency graph viewer</li> </ol>"},{"location":"debugtools/tywaves-chiselwatt-usecase/","title":"Tywaves real use case: debugging ChiselWatt","text":"<p>ChiselWatt is a general-purpose soft-core processor in Chisel that implements a small version of the OpenPOWER ISA (Instruction Set Architecture).</p> <p>This processor has been used in our paper to demonstrate the advantages of Tywaves over standard waveform viewers.</p> <p>ChiselWatt is published under Chisel 3.5.0 so using the Scala FIRRTL Compiler and ChiselTest. Whereas Tywaves works with newer versions Chisel, using CIRCT and ChiselSim. Therefore, a fork has been made to adapt the implementation to the newer versions. If you would like to try it, please, clone the fork instead of the official repo and simulate it following the Tywaves usage instructions.</p> <p>Warning</p> <p>The updates are still a work in progress, so you may find something that differs from the original project or not working yet. Once the updates will be complete and the whole functionality ported to the new versions of Chisel a PR will be opened.</p>"},{"location":"debugtools/tywaves-chiselwatt-usecase/#analysis-of-chiselwatt","title":"Analysis of ChiselWatt","text":"<p>In the main page, the capabilities of Tywaves are already presented with \"ad-hoc\" examples. This use case serves to demonstrate that Tywaves also works for an existing implementation and highlight its applicability to real-world and larger projects.</p> <p>As known, a general-purpose processor executes a set of instructions of an ISA which might specify the operations to perform (using opcodes) as well as the operands used for the computation. In ChiselWatt, enumerations can be used to define opcodes, states of computational units, register identifiers, selectors, etc., allowing manipulation of named values rather than numbers. This makes the code more readable and maintainable and highlights the importance of  abstractions in Chisel and consequently of Tywaves, especially for large projects.</p> <p>The figures below compares the output waveforms from Tywaves with a standard viewre without Tywaves. The figures present labeled blocks to compare different features and representations:</p> <ul> <li>Block A: Opcode represented as enums; </li> <li>Block B: State of computational units; </li> <li>Block C: Aggregated signal hierarchies;</li> <li>Block D: Types enable clearer distinctions; </li> <li>Block E: Chisel bindings and Chisel-Scala types.</li> </ul> <p>It is clear to see that Tywaves makes easier to inspect which opcode is being fetched or the current state of a  computational unit (Blocks A and B). Moreover, preserving the hierarchies of the aggregated signals allows keeping the  same original structure and variable names. When compared to standard, Tywaves representaion allows for a clear  distinction of aggregates and fields from ground variables and enables collapsing and loading signals of an aggregate as a whole data structure (Block C). In contrast to classic waveforms, Tywaves keeps the type information, improving the  understanding of the expected values and what a signal represents, e.g., distinguishing between instructions and control signals (Block D). Furthermore, Tywaves preserves the distinction between Chisel bindings and Chisel-Scala types,  enabling the identification between ports, wires, intermediate results, etc., (Block E).</p> <p>Note</p> <p>You can find more details in <code>Publications</code></p> Fig. 1 - Tywaves ouptut for ChiselWatt simulation Fig. 2 - Standard waveform output for ChiselWatt simulation"},{"location":"debugtools/tywaves-chiselwatt-usecase/#reproducing-the-results","title":"Reproducing the results","text":"<p>To test ChiselWatt and reproduce the results you can run the <code>Core.scala</code> testbench which uses ChiselSim as described in the README  of this repository. Link to the testbench: chiselwatt/src/test/scala/Core.scala.</p>"},{"location":"debugtools/tywaves-chiselwatt-usecase/#additional-updates-of-chiselwatt","title":"Additional updates of ChiselWatt","text":"<p>In addition to simple changes from one version to another, such as updating some methods used, more complex updates have  been required and are described below.</p>"},{"location":"debugtools/tywaves-chiselwatt-usecase/#replacing-enum-with-chiselenum-in-chiselwatt","title":"Replacing <code>Enum</code> with <code>ChiselEnum</code> in ChiselWatt","text":"<p>In the original version of ChiselWatt, the processor represented Opcodes and states of FSMs using Scala methods  abstractions or <code>Enum</code>. Later versions of Chisel provide <code>ChiselEnum</code> as a replacement, so Tywaves provides a representation for them. As a consequence, the opcodes and states have been updated accordingly.</p>"},{"location":"debugtools/tywaves-chiselwatt-usecase/#workaround-for-memory-initialization-with-chiselsim","title":"Workaround for memory initialization with ChiselSim","text":"<p>Some modules in ChiselWatt had black boxes implementing <code>initial</code> Verilog statement for loading of hex memory files that store a program. With the new versions of Chisel, this would be possible with <code>chisel3.util.experimental.loadMemoryFromFileInline</code>. However, this feature does not fully work yet with ChiselSim (https://github.com/chipsalliance/chisel/issues/4340). Thus, as a temporary workaround, I updated ChiselWatt such that the input file is read from Scala code during Chisel elaboration  and the corresponding memory initialized with a for loop when the system <code>reset</code> is high during a simulation with ChiselSim.</p>"},{"location":"debugtools/tywaves/","title":"Tywaves project: a type based waveform viewer for Chisel and Tydi-Chisel","text":"<p>This repository contains a summary of the Tywaves project and an API to easily use it for testing a Chisel project. Tywaves consists of implementing a new type based waveform viewer for Chisel and Tydi-Chisel circuits.</p> <p>The full project aims to successfully display waveforms of a Chisel circuit while maintaining the source code structure, constructs, hierarchies and source language type information (the Scala data type and constructor parameters) of signals and modules.</p> <p>To achieve this goal, the project:</p> <ol> <li>collects high-level debug information (DI) of a circuit;</li> <li>elaborates the DI in order to associate it with the values in a trace from a simulator, in other words an association    with the signals and modules output of a chisel-CIRCT compilation;</li> <li>emits a well-defined file format that a viewer can read together with a trace file to properly display the waveforms;</li> <li>makes everything compatible and portable with the    new ChiselSim.</li> </ol> <p></p> <pre><code>If you are interested in using the tool and have any feedback on its implementation, \nplease open an issue or contact me.\n</code></pre>"},{"location":"debugtools/tywaves/#internal-functionality","title":"Internal functionality","text":"<p>The internal structure of the Tywaves project, how it works and details about the work done can be found in the wiki pages.</p> <p>Note: The Tywaves project is currently under development. For now, the new functionality in <code>chisel</code>, <code>firtool</code> and <code>surfer</code> is available in my forks of the repositories. Pull-requests have been issued to the official repositories This would allow the Tywaves project to have a better integration and availability directly in the official releases.</p>"},{"location":"debugtools/tywaves/#table-of-contents","title":"Table of contents","text":"<ul> <li>Tywaves project: a type based waveform viewer for Chisel and Tydi-Chisel</li> <li>Internal functionality</li> <li>Table of contents</li> <li>Getting started<ul> <li>Prerequisites</li> <li>Installation</li> <li>Install surfer-tywaves</li> <li>Download and install the forks of Chisel and Firtool</li> <li>Install and publish locally this library: Tywaves-Chisel-API</li> </ul> </li> <li>Usage in a project through the Tywaves-Chisel-API<ul> <li>List of available settings of the simulators</li> <li>Run a quick simple example</li> <li>Real use case scenario: debugging ChiselWatt</li> </ul> </li> <li>Features<ul> <li>Future work</li> </ul> </li> <li>Versioning and tools (ref)<ul> <li>Old backend implementations (ref)</li> </ul> </li> <li>Publications</li> <li>License</li> </ul>"},{"location":"debugtools/tywaves/#getting-started","title":"Getting started","text":""},{"location":"debugtools/tywaves/#prerequisites","title":"Prerequisites","text":"<p>The full project depends on the following tools. To install them, please check the links below:</p> <ul> <li>Make</li> <li>Scala and sbt   and scala-cli (Note: Java versions prior to Java 11, tywaves may not work   correctly)</li> <li>Rust</li> <li><code>openssl</code> for installing the waveform   gui (instructions)</li> <li>Verilator (recommended <code>v4.228+</code>)</li> </ul>"},{"location":"debugtools/tywaves/#installation","title":"Installation","text":"<p>The Makefile contains all the necessary commands to install the tools and the Tywaves-Chisel-API library.</p> <p>You can run <code>make all</code> to install everything in one go, or you can install the components separately.</p>"},{"location":"debugtools/tywaves/#install-surfer-tywaves","title":"Install surfer-tywaves","text":"<p>To install the latest release of the fork:</p> <pre><code>make install-surfer-tywaves\nmake clean # Delete the cloned repository\n</code></pre> <p>or install the development version:</p> <pre><code>make install-surfer-tywaves-dev\nmake clean\n</code></pre>"},{"location":"debugtools/tywaves/#download-and-install-the-forks-of-chisel-and-firtool","title":"Download and install the forks of Chisel and Firtool","text":"<pre><code>make install-chisel-fork\nmake install-firtool-fork-bin # Download the Linux precompiled version (too long to compile)\n</code></pre> <p>If you want to compile the <code>firtool</code> from source, you can check the instructions, once cloned the correct version.</p>"},{"location":"debugtools/tywaves/#install-and-publish-locally-this-library-tywaves-chisel-api","title":"Install and publish locally this library: Tywaves-Chisel-API","text":"<pre><code>git checkout &lt;your-release&gt;\nmake install-tywaves-chisel-api\n</code></pre> <p>Once published locally, you can use it in your project by adding the following line to your <code>build.sbt</code> file:</p> <pre><code>libraryDependencies += \"com.github.rameloni\" %% \"tywaves-chisel-api\" % \"your-version-here\"\n</code></pre>"},{"location":"debugtools/tywaves/#usage-in-a-project-through-the-tywaves-chisel-api","title":"Usage in a project through the Tywaves-Chisel-API","text":"<p>The <code>Tywaves-Chisel-API</code> is a library that allows to easily enable the Tywaves in a Chisel project. It provides 2 high-level simulators with functionalities to simulate a circuit through svsim, emit VCD traces and generate a symbol table for the surfer-tywaves waveform viewer itself automatically:</p> <ul> <li>ParametricSimulator: provides some generic   features such as VCD trace emission, name the trace file, pass additional arguments to firtool before simulation, save   the workspace of svsim.<sup>1</sup></li> <li>TywavesSimulator: it extends the parametric simulator in   order to generate extra debug information and optionally launch the waveform viewer directly after the simulation.</li> </ul> <p>Their usage is very similar to ChiselTest and EphemeralSimulator since they both implement the <code>PeekPokeAPI</code>, but they use the new official ChiselSim, and they offer additional features compared to EphemeralSimulator. A simulation can be run as follows:</p> <pre><code>// Import the simulator\n\nimport tywaves.simulator.simulatorSettings._\nimport tywaves.simulator.ParametricSimulator._\n//import tywaves.simulator.TywavesSimulator._\n\nsimulate(\n  new DUT(), // The module to simulate\n  settings = Seq(/* List of simulator settings */),\n  simName = \"Name_of_the_simulation\", // used to name the directory in test_run_dir\n) {\n  dut =&gt; // Body of the simulation using the PeekPokeAPI\n}\n</code></pre>"},{"location":"debugtools/tywaves/#list-of-available-settings-of-the-simulators","title":"List of available settings of the simulators","text":"<p>A simulation can be customized by passing some settings to the simulator. The following options can be specified for <code>ParametricSimulator</code> and / or <code>TywavesSimulator</code> classes using the following syntax:</p> Setting Description Simulator <code>VcdTrace</code> Enable the VCD output optimizing out signals starting with an underscore (_) in the final verilog <code>ParametricSimulator</code> and <code>TywavesSimulator</code> <code>VcdTraceWithUnderscore</code> Enable the VCD output (including \"underscored\" signals) <code>ParametricSimulator</code> and <code>TywavesSimulator</code> <code>SaveWorkdir</code> Save the workdir of <code>svsim</code> <code>ParametricSimulator</code> and <code>TywavesSimulator</code> <code>SaveWorkdirFile(name: String)</code> Save the workdir with a specific name <code>ParametricSimulator</code> and <code>TywavesSimulator</code> <code>NameTrace(name: String)</code> Give a name to the VCD trace <code>ParametricSimulator</code> and <code>TywavesSimulator</code> <code>WithFirtoolArgs(args: Seq[String])</code> Pass arguments to <code>firtool</code> under the simulation <code>TywavesSimulator</code> <code>WithTywavesWaveforms(runWaves: Boolean)</code> Enable the generation of extra debug information (to fully exploit the tywaves project) and (optionally <code>runWaves=true</code>) launch the waveform viewer directly once the simulation has been completed <code>ParametricSimulator</code> and <code>TywavesSimulator</code> <code>WithTywavesWaveformsGo(runWaves: Boolean)</code> Same as <code>WithTywavesWaveforms</code> but without blocking sbt if <code>runWaves</code> is <code>true</code> <code>TywavesSimulator</code> <p>Note: please open an issue/PR to request new settings.</p>"},{"location":"debugtools/tywaves/#run-a-quick-simple-example","title":"Run a quick simple example","text":"<p>To run a quick example you can try to run the examples in the examples folder.</p> <pre><code>cd example\n# Run the gcd example\nscala-cli test gcd.test.scala\n\n# Run a Tydi-Chisel example\nscala-cli test tydi-chisel.test.scala\n</code></pre> <p>The following images show the classic and tywaves waveform visualization of the GCD module.</p> <pre><code>/** A simple module useful for testing Chisel generation and testing */\nclass GCD extends Module {\n  val io = IO(new Bundle {\n    val a             = Input(UInt(32.W))\n    val b             = Input(UInt(32.W))\n    val loadValues    = Input(Bool())\n    val result        = Output(UInt(32.W))\n    val resultIsValid = Output(Bool())\n  })\n\n  val x = Reg(UInt(32.W))\n  val y = Reg(UInt(32.W))\n\n  when(x &gt; y)(x := x -% y).otherwise(y := y -% x)\n\n  when(io.loadValues) {\n    x := io.a\n    y := io.b\n  }\n\n  io.result := x\n  io.resultIsValid := y === 0.U\n}\n</code></pre> Only VCD loaded Tywaves"},{"location":"debugtools/tywaves/#real-use-case-scenario-debugging-chiselwatt","title":"Real use case scenario: debugging ChiselWatt","text":"<p>If you are interested to see Tywaves working in an existing Chisel design, you can refer to this section. This example has been used in the official publication to assess Tywaves.</p>"},{"location":"debugtools/tywaves/#features","title":"Features","text":"<p>The following list shows a summary of the features added by the Tywaves project to Chisel/CIRCT and Surfer:</p> <ul> <li> Parse and map Chisel/FIRRTL/Verilog circuits</li> <li> Emit VCD traces from the simulator (both with and without underscores in the signal names)</li> <li> Automatic debug information generation (from Chisel through CIRCT to the waveform viewer)<ul> <li> Dump Chisel types</li> <li> Dump constructor parameters in the final symbol table</li> <li> Distinguish IO, Reg and wires</li> </ul> </li> <li> Chisel data types representation (basic):<ul> <li> Hierarchical structures of bundles</li> <li> Vectors</li> <li> Enums</li> <li> Hierarchical modules (modules with children)<ul> <li> Generic submodules (all different types of modules)</li> <li> Variants of the same module (i.e. parametric module)</li> <li> Instances of the same module</li> </ul> </li> </ul> </li> <li> Chisel data types representation (advanced):<ul> <li> Type visualization for module instances (scopes in the waveform viewer)</li> <li> Constructor parameters for both signals and modules</li> <li> Selectable signal value rendering (with type information attached)</li> <li> Automatic/custom signal value rendering</li> <li> For loops code generation</li> <li> Temporary values (also inside <code>when</code> and <code>otherwise</code> blocks)</li> </ul> </li> </ul>"},{"location":"debugtools/tywaves/#future-work","title":"Future work","text":"<ul> <li>Internals</li> <li>Use intrinsics as a communication method to propagate type information between Chisel and CIRCT instead of FIRRTL annotations. Annotations are used temporarily and need to be replaced with a mechanism more suitable for MLIR operations. This change should enable the acceptance of PRs in the official repositories.</li> <li>Create a new debug file format independent of HGLDD that is free from the code patterns and limitations of VCS internals. HGLDD is built using some internal VCS names and methods that overcomplicate the format in general cases.</li> <li>Performance</li> <li>Profiling and performance overhead</li> <li>Remove the VCD rewriter step to improve the performance of <code>tywaves-rs</code> and Surfer.</li> <li>Parallelize the <code>TyVcdBuilder</code> to further improve the performance of the viewer.</li> <li>Feature Extensions</li> <li>Extend and test the infrastructure of Tywaves to support other languages integrated into CIRCT.</li> <li>Enable type information for module instances in the viewer UI.</li> <li>Enable to save the state of the viewer. This feature should allow to save the appearance of waveforms onto a state file.</li> <li>Automatically choose how to render a value based on the type name: either based on the name of the type or by defining an API that allows users to define how to render a value, similar to a <code>toString()</code> method.</li> <li>Enable switching between multiple IRs in the viewer dynamically (i.e., Chisel, FIRRTL, Verilog).</li> <li>Introduce a new specific visualization for hardware streaming interfaces (i.e., providing a new abstract view like showing deserializing a whole message received). This would work for Tydi but also for other streaming protocols if a standard interface for visualization is provided.</li> </ul>"},{"location":"debugtools/tywaves/#versioning-and-tools-ref","title":"Versioning and tools (ref)","text":"<p>Use the new name of the library in your sbt dependencies: <code>com.github.rameloni::tywaves-chisel-api:&lt;version&gt;</code>.</p> <p>IMPORTANT NOTE: Always use the latest version of Tywaves</p> Release Chisel fork version (from <code>rameloni/chisel</code>) Firtool fork version (from <code>rameloni/circt</code>) Tywaves-rs version Surfer-tywaves version 0.4.2-SNAPSHOT v6.4.3-tywaves-SNAPSHOT v0.1.5 v0.1.4 v0.3.2-tywaves-dev-SNAPSHOT 0.4.1-SNAPSHOT v6.4.3-tywaves-SNAPSHOT v0.1.4 v0.1.4 v0.3.2-tywaves-dev-SNAPSHOT 0.4.0-SNAPSHOT v6.4.3-tywaves-SNAPSHOT v0.1.3 v0.1.4 v0.3.2-tywaves-dev-SNAPSHOT 0.3.0-SNAPSHOT v6.4.2-tywaves-SNAPSHOT v0.1.1 v0.1.1 v0.3.0-tywaves-dev-SNAPSHOT"},{"location":"debugtools/tywaves/#old-backend-implementations-ref","title":"Old backend implementations (ref)","text":"<p>Use the old name of the library in your sbt dependencies: <code>com.github.rameloni::tywaves-demo-backend:&lt;version&gt;</code>.</p> Release Chisel fork version (from <code>rameloni/chisel</code>) Firtool version (official CIRCT repo) Tywaves-rs version Surfer-tywaves version 0.2.1-SNAPSHOT v6.1.0-tywaves-SNAPSHOT v1.75.0 v0.1.0 v0.2.1-tywaves-dev-SNAPSHOT 0.2.0-SNAPSHOT v6.1.0-tywaves-SNAPSHOT v1.75.0 - v0.2.0-tywaves-dev-SNAPSHOT 0.1.1-SNAPSHOT v6.1.0-tywaves-SNAPSHOT v1.75.0 - v0.1.1-SNAPSHOT 0.1.0-SNAPSHOT v6.1.0 official repo v1.62.0 - v0.1.0-SNAPSHOT"},{"location":"debugtools/tywaves/#publications","title":"Publications","text":"<p>The paper on Tywaves has been submitted for publication NorCAS 2024.  It is currently available at https://arxiv.org/abs/2408.10082. If you like Tywaves, you can cite this work using the following BibTex entry:</p> <pre><code>@unpublished{meloni2024tywavestypedwaveformviewer,\n      title={{Tywaves: A Typed Waveform Viewer for Chisel}}, \n      author={Raffaele Meloni and H. Peter Hofstee and Zaid Al-Ars},\n      year={2024},\n      eprint={2408.10082},\n      archivePrefix={arXiv},\n      primaryClass={cs.AR},\n      url={https://arxiv.org/abs/2408.10082}, \n      note={Submitted for publication}\n}\n</code></pre> <p>The BibTex entry will be updated when the paper will be officially published.</p> <p>For more details about the original work and the justification behind design choices, please refer to the respective MSc thesis:</p> <p>Raffaele Meloni. Tywaves: A Typed Waveform Viewer for Chisel HDL with Typed Circuit Components and Tydi Streams. MSc thesis, TU Delft, Aug. 2024. Available: https://repository.tudelft.nl/record/uuid:829f43e0-1c34-4624-8c33-5182b71bd027.</p>"},{"location":"debugtools/tywaves/#license","title":"License","text":"<p>Tywaves is licensed under the Apache License 2.0. Please see LICENSE for details.</p> <ol> <li> <p>While <code>TywavesSimulator</code> is a central part of the Tywaves project, the <code>ParametricSimulator</code> is able to simulate any Chisel circuit independently from Tywaves. In case you need to simulate a circuit without a \"Chisel\" representation, you can use <code>ParametricSimulator</code> to emit a VCD trace. If you want to try the functionalities of <code>Tywaves</code> then <code>TywavesSimulator</code> is the right choice.\u00a0\u21a9</p> </li> </ol>"},{"location":"tydi/interface-code/","title":"Writing interfaces","text":"<p>Tydi, as the spec explains, is language-agnostic. However, there are integrations available for various HDLs.</p> <p>Below you can see an example of a streamlet with simple interface that only has a single output stream. The data-type is an RGB pixel value nested in a group that gives it an index. The meaning of this datatype does not matter, it is just to showcase the different syntaxes for different languages. Note that the VHDL example contains a compiled, non-rich output.</p> Tydi-langChiselClashVHDL <pre><code>type byte = Bit(8);\n\nGroup RGB {\n    r: byte;\n    g: byte;\n    b: byte;\n};\n\nGroup MyGroup {\n    index: Bit(64);\n    value: RGB;\n};\n\ntype RootStream = Stream(MyGroup, c=8, d=1, n=1, r=false, u=Null);\n\nstreamlet SimpleStreamlet {\n    output: RootStream out;\n};\n</code></pre> <pre><code>import nl.tudelft.tydi_chisel._\nimport chisel3._\n\nclass RGB extends Group {\n    private val byte = Uint(8.W)\n\n    val r = byte\n    val g = byte\n    val b = byte\n}\n\nclass MyGroup extends Group {\n    val index = BitsEl(64.W)\n    val value = new RGB\n}\n\nclass RootStream extends PhysicalStreamDetailed(e=new MyGroup, c=8, d=1, n=1, r=false, u=Null())\n\nclass SimpleStreamlet extends TydiModule {\n    private val outputStream = new RootStream\n    val output: PhysicalStream = outputStream.toPhysical\n}\n</code></pre> <pre><code>type Byte = Unsigned 8\n\ntype MyGroup = Group (\n    r &gt;:: Byte :&amp;:\n    g &gt;:: Byte :&amp;:\n    b &gt;:: Byte\n)\n\ntype MyGroup = Group (\n    index &gt;:: Unsigned 64 :&amp;:\n    value &gt;:: RGB\n)\n\ntype RootStream = TydiSynth New (C 8) 1 1 () MyGroup\n\nSimpleStreamlet :: () -&gt; RootStream\n</code></pre> <pre><code>library ieee;\nuse ieee.std_logic_1164.all;\n\npackage proj is\n\n  component simple_interface_0_simple_streamlet_com is\n    port (\n      clk : in std_logic;\n      rst : in std_logic;\n      root_stream_out_valid : out std_logic;\n      root_stream_out_ready : in std_logic;\n      root_stream_out_data : out std_logic_vector(87 downto 0);\n      root_stream_out_last : out std_logic_vector(0 downto 0);\n      root_stream_out_strb : out std_logic_vector(0 downto 0)\n    );\n  end component simple_interface_0_simple_streamlet_com;\n\nend proj;\n</code></pre>"},{"location":"tydi/playground/","title":"Tydi playground","text":"<p>Using the app below, you can try out how Tydi would work for your data structures.</p> <p></p>"},{"location":"tydi/what-is-tydi/","title":"Understanding Tydi","text":"<p>Tydi is a standard to exchange complex data types with variable-length sequences between components in a straightforward and HDL-agnostic manner. Variable-length refers to that the length of the sequence can be unknown when a data-stream starts. More information in the section dimensionality information.</p> <p>This getting-started guide will introduce you to Tydi's core principles and concepts.</p>"},{"location":"tydi/what-is-tydi/#structure-elements","title":"Structure elements","text":"<p>Transferring data of any complexity starts at defining the data structure. Tydi is designed to be able to represent any hierarchical data-structure. In the following sections, the Tydi building-blocks (called elements) that can be used to build a data-structure are listed.</p>"},{"location":"tydi/what-is-tydi/#bits","title":"Bits","text":"<p>A <code>bits</code> element represents any ground type, such as booleans, integers, floating or fixed point numbers, characters, etc.</p>"},{"location":"tydi/what-is-tydi/#null","title":"Null","text":"<p>A <code>null</code> element indicates the absence of any value.</p>"},{"location":"tydi/what-is-tydi/#group","title":"Group","text":"<p>A <code>group</code> element is, unsurprisingly, a set of other structure elements grouped together as named leafs of the <code>group</code>.</p> <p>This concept exists in almost all higher programming language in the form of a <code>struct</code>ure, <code>dict</code>ionary, <code>object</code>, <code>dataclass</code>, <code>case class</code>, etc. etc.</p> <p>A <code>group</code> can contain all other elements.</p>"},{"location":"tydi/what-is-tydi/#union","title":"Union","text":"<p>A <code>union</code> element represents a choice in the type of data that should be transmitted (one of, whereas a <code>group</code> is all of). Its functionality is slightly more complicated than other elements because the structure it represents is non-constant.</p> <p>It is similar to C's <code>union</code> construct, except a choice must be made about what data is represented at any given time.</p> <p>A <code>union</code> can contain all other elements.</p> Explanation of operation <p>The following pseudocode illustrates this concept. A <code>union</code> with three options (a ground type <code>bits</code>, <code>stream</code>, and <code>null</code>) <pre><code>type SomeBits = Bits(8)\ntype SomeGroup = { a: Bits(4), b: Bits(8) } \\\\ Has combined width of 12\ntype SomeStream = ...\n\ntype SomeUnion = Union {\n    option1: SomeBits,\n    option2: SomeGroup,\n    option3: SomeStream,\n    option4: null\n}\n</code></pre> When this is synthesized, it will become <pre><code>type SomeUnion = Union {\n    tag: Bits(ceil(log2(3))),\n    data: Bits(max(|SomeBits|, |SomeGroup|, |SomeStream|, |null|))\n}\n</code></pre> or</p> <pre><code>type SomeUnion = Union {\n    tag: Bits(2),\n    data: Bits(12)\n}\n</code></pre> <p>The <code>data</code> field will contain the data of the field that is selected by the <code>tag</code> value. Any stream will have a bitwidth of <code>0</code> for the calculation as each stream is exposed separately, but the validity of the stream's value is still controlled by the <code>tag</code> field.</p>"},{"location":"tydi/what-is-tydi/#stream","title":"Stream","text":"<p>A <code>stream</code> element is used to represent a data sequence of 1 or higher dimension.</p> <p>Such a sequence naturally translates to all forms of <code>seq</code>uence, <code>array</code>, <code>list</code>, <code>vector</code>, etc. etc. Specifically, it also includes <code>string</code>s.</p> <p>A stream can contain any element.</p> <p>Directly nesting streams</p> <p>A stream can even directly contain another stream. This is, however, not useful in most situations and only applicable in select situations. Normally you would increase the <code>dimensionality</code> parameter instead.</p>"},{"location":"tydi/what-is-tydi/#dissection-of-a-stream","title":"Dissection of a stream","text":"<p>In essence a <code>stream</code>, at the physical level, is very similar to the universal concept of a handshaked signal. A handshaked signal consists of 3 sub-signals: <code>ready</code>, <code>valid</code>, and <code>data</code>. <code>valid</code> is used by the data-source to indicate that the data currently present on the <code>data</code> signal is valid and ready for transfer. <code>ready</code> is used by the data-sink to indicate that it (the sink component) is ready to receive data. When both <code>ready</code> and <code>valid</code> are asserted at the same time, a 'transfer' takes place at the next active clock edge.</p> <p>A Tydi stream is therefore a handshaked signal with a (maybe complexly) nested but fixed wire bundle as <code>data</code> sub-signal. What differentiates it starts at the dimensionality information.</p>"},{"location":"tydi/what-is-tydi/#dimensionality-or-length-information","title":"Dimensionality (or length) information","text":"<p>There are generally to ways to indicate the length of a variable length array (such as a string of characters).</p> <ul> <li>Have a termination flag or packet   This is the way C determines the length of a string. The string always ends with a null-termination character (<code>\\0</code>)</li> <li>Save the length of the sequence   This is the way vectors work, such as <code>vector&lt;char&gt;</code>. The data structure will contain</li> </ul> <p>Tydi works with termination flags. These are called <code>last</code> bits. A \\(D\\)-dimensional stream will have <code>D</code> <code>last</code> bits, one to close off each dimension.</p>"},{"location":"tydi/what-is-tydi/#empty-sequences-and-example","title":"Empty sequences and example","text":"<p>When transferring multidimensional data, it can happen that one of the dimensions does not contain lower dimensional sequences or data. Take, for example, the following slice of three-dimensional data:</p> <p><pre><code>data = [[[1, 2, 3], [4, 5]], [[ /* empty d3 */ ], [6, 7]], [ /* empty d2 */ ]]\n</code></pre> The comments indicate empty subsequences at the lowest and middle dimensions. This is supported by setting <code>last</code> flags appropriately.</p> <ul> <li>The element <code>3</code> closes off the lowest dimension, so its <code>last</code> value will be <code>001</code>.</li> <li>The element <code>5</code> does the same but also closes off the second dimension, so its <code>last</code> value is <code>011</code>.</li> <li>The next empty list also closes of the lowest dimension, but there is no data, so an 'empty' packet is sent with a <code>last</code> value of <code>001</code>.</li> <li>The last empty list closes off the second (and third) dimension, resulting in an empty packet with <code>last=110</code>. Notice how the lowest dimension is not closed. This indicates that there was no empty sequence at that dimension.</li> </ul> <p>This shows an important distinction between 'normal' packets and 'empty' packets.</p> <p>A normal, data-containing, packet will always contain data at the lowest dimension (level \\(D\\)). A data packet that ends the sequence will, therefore, always close off the lowest dimension.</p> <p>Empty packets are an exception because there is no actual data sequence to close off. Therefore, an empty packet can close off a higher dimension without closing all lower ones as well.</p> <p>An empty packet can be defined (in the sense of transferred) by turning off a lane's data validity while setting the appropriate <code>last</code> bits.</p>"},{"location":"tydi/what-is-tydi/#engineering-parameters","title":"Engineering parameters","text":"<p>By now we have collected the following signals: <code>ready</code>, <code>valid</code>, <code>data</code>, and <code>last</code>. For basic cases, this is all you need. However, Tydi supports some engineering parameters that allow designers to tune the performance and operation of their interfaces.</p>"},{"location":"tydi/what-is-tydi/#throughput","title":"Throughput","text":"<p>To achieve higher throughput than is possible by sending one element at a time, a stream supports having multiple lanes. Each lane can transfer one element per transfer. A stream is said to have \\(N\\) lanes. As each lane transfers an element, a stream will also contain \\(N\\) sets of \\(d\\) <code>last</code> bits to encode dimensionality information for each element.</p>"},{"location":"tydi/what-is-tydi/#lane-validity","title":"Lane validity","text":"<p>When a stream has multiple lanes (\\(N&gt;1\\)), the handshaking of the signal still goes through the <code>ready</code> and <code>valid</code> signals. However, as the length of the data might not align with a multiple of \\(N\\), a strategy to show which lanes carry element data and which do not is needed. Three signals are introduced that allow toggling lanes on and off. Their behavior depends on how the protocol is tuned, which is explained in the next section.</p> <ul> <li><code>stai</code> (start index) specifies from which index lanes should be considered to carry valid data.</li> <li><code>endi</code> (end index) specifies up to which index (inclusive) lanes should be considered to carry valid data.</li> <li><code>strb</code> (strobe) is a bitmask of \\(N\\) bits that specifies 1:1 which lanes should be considered to carry valid data.</li> </ul> <p>For any given lane of index \\(i\\), the validity is given by \\((\\text{stai} \\le i \\le \\text{endi}) \\wedge (\\text{strb}[i])\\).</p> <p>As mentioned, to allow encoding empty sequences, a lane's <code>last</code> information is still considered even when the lane is disabled.</p>"},{"location":"tydi/what-is-tydi/#protocol-tuning","title":"Protocol tuning","text":"<p>To allow further customization of performance and offer a trade-off between source transfer generation effort and sink transfer reception effort, the Tydi protocol has several variations. These variations are chosen by the protocol complexity level. A low protocol-complexity is very straightforward to understand, but does not allow for the highest throughput performance or processing flexibility. A high protocol-complexity allows for the highest performance and flexibility but may be harder to ingest. Examples of what protocol complexities exist and what transfers look like at these complexities are shown in the next section.</p>"},{"location":"tydi/what-is-tydi/#visual-signal-overview","title":"Visual signal overview","text":"<p>The following diagram contains a visual explanation of each signal and their use at each protocol complexity level, together with an example transfer of the same data at that protocol-complexity. The data being transferred is a 2D character sequence: <code>[\"she\", \"is\", \"a\", \"dolphin\"]</code>.</p> <p></p>"},{"location":"tydi/what-is-tydi/#stream-interrelationships","title":"Stream interrelationships","text":"<p>The previous text explains how a stream works, but also that elements can be nested arbitrarily. This includes other streams. The structure that is transfered by a stream can thus include other streams. We call these nested streams. This functionality is essential for transferring complex data.</p> <p>Tip</p> <p>A simple structure like a multi-dimensional matrix may be transmitted using Tydi, but a singular structure like this alone uses a single stream with some dimensionality \\(d\\). As such, it does not benefit from Tydi's nesting flexibility.</p> <p>Nesting happens when transferring a structure that has a nested list somewhere. Think, for example, about a list of posts that each have a list of tags.</p> <p>Minimal post with tags structure</p> <pre><code>type root = post[];\ntype post = Group {\n  tag: string[]\n}\n</code></pre> <p>The following example block shows a complete version of the example with a richer structure.</p> Complete post list example <p>We will use the list of posts example to explain various aspects of Tydi's functionality. An example may look like this <pre><code>[\n  {\n    \"postId\": 123,\n    \"title\": \"Exploring the Hidden Gems of Andalusia\",\n    \"content\": \"Just returned from an amazing trip through Andalusia! The Alhambra was breathtaking, and the food in Seville was incredible. Highly recommend visiting the white villages of Grazalema and Ronda.\",\n    \"author\": {\n      \"userId\": 456,\n      \"username\": \"TravelBug_88\"\n    },\n    \"createdAt\": \"2025-06-15T10:30:00Z\",\n    \"updatedAt\": \"2025-06-15T11:00:00Z\",\n    \"tags\": [\n      \"Travel\",\n      \"Spain\",\n      \"Food\"\n    ],\n    \"likes\": 125,\n    \"shares\": 15,\n    \"comments\": [\n      {\n        \"commentId\": 1,\n        \"author\": {\n          \"userId\": 789,\n          \"username\": \"CultureVulture\"\n        },\n        \"content\": \"Oh, Andalusia is truly magical! Did you get a chance to see any flamenco shows in Seville?\",\n        \"createdAt\": \"2025-06-15T12:05:00Z\",\n        \"likes\": 10\n      },\n    ]\n  }\n]\n</code></pre></p> <p>In the case of a post with tags, we have two streams:</p> <ul> <li>A stream of posts<ul> <li>A stream of tags</li> </ul> </li> </ul> <p>The posts stream sends a sequence of post items. Each item of this posts stream will have a corresponding sequence of items in the tags stream. According to general convention we call the posts stream the parent stream of the tags stream and the tags stream itself the child or nested stream.</p> <p>The list/sequence of tags for a stream may, of course, be empty. In this case, an empty item will be transmitted as explained in the empty sequences section.</p> <p>The relationship and association between items transmitted in a parent and child stream must be tracked by the source and sink components based on the dimensionality information in the <code>last</code> signal. On the level of Tydi's transfer protocol (disregarding semantic meaning and focussing purely on the signal behavior), each stream, nested or not, operates mostly independently using the same protocol. The only inter-stream dependency that is relevant for the transfer protocol relates to deadlock avoidance.</p> <p>Deadlocks</p> <p>Deadlock occurs when there is a circular awaiting going on between sender and receiver components marking the items <code>valid</code>/<code>ready</code> of two or more streams.</p> <p>To prevent the possibility of deadlocks, Tydi prescribes which logical dependencies the funtionality of a component is allowed to have based on the Tydi structure of its interface. For more details, read about the natural ordering principle, especially the example.</p>"},{"location":"tydi/what-is-tydi/#technical-details","title":"Technical details","text":"<p>Exact details of operation such as allowed conditions for certain signal behaviors are specified in the technical specification, called the Tydi spec. Check out the Tydi spec.</p>"},{"location":"tydi/what-is-tydi/#getting-started-with-tydi","title":"Getting started with Tydi","text":"<p>Now that you know what Tydi is and how it works in broad terms, you are ready to get started and experiment with Tydi yourself. One easy way to do that is with the Tydi Playground. Here you can see how your own data would translated to a Tydi representation and how this data would be transfered over an interface, or build a structure yourself.</p>"},{"location":"tydi/integrations/hls/","title":"Tydi in HLS","text":"<p>An HLS implementation of Tydi does not exist yet, but is planned to be created. As Tydi is a superset of AXI-Stream and e.g. Vitis HLS has an excellent library for AXI-Stream creation and usage, a Tydi library can utilize and build upon this built-in functionality.</p>"},{"location":"tydi/integrations/tydi-chisel/","title":"Tydi-Chisel","text":"<p>Tydi-Chisel allows you to transfer simple to very complex nested variable length sequences between components over a stream bus in a structured way, using familiar Chisel concepts.</p>"},{"location":"tydi/integrations/tydi-chisel/#what-is-tydi","title":"What is Tydi?","text":"<p>Tydi-Chisel is an implementation of Tydi interfaces and concepts in Chisel.</p> <p>Tydi (Typed dataflow interface) is an open specification for streaming dataflow designs in digital circuits, allowing designers to express how composite and variable-length data structures are transferred over streams using clear, data-centric types.</p> <p>Chisel (Constructing Hardware in a Scala Embedded Language) is a high-level open-source hardware description language (HDL).</p> <p>With Tydi as data-streaming communication flow specification and Chisel as flexible implementation, an interface-driven design method can be followed.</p>"},{"location":"tydi/integrations/tydi-chisel/#why-tidy","title":"Why Tidy?","text":"<p>Developing hardware is notoriously difficult. Many solutions exist to lighten the load of developing implementations for hardware components. Yet, a gap exists between the easy use of complex nested (sequence) data structures in software and trying to work with them in hardware.</p> <p>Tydi aims to solve this issue by proposing an open standard for streams of arbitrary variable length data-structures. A data-structure is created by nesting <code>Bits</code>, <code>Group</code>, <code>Union</code> and <code>Stream</code> elements. See the following table for the meaning of the used terms.</p> Term Type Software equivalent Chisel equivalent Meaning Null Logical type <code>Null</code> <code>Bits(0)</code> Empty data Bit Logical type Any primary datatype Ground hardware type Primary datatype of <code>x</code> bits Group Logical type <code>Struct</code>/<code>dict</code>/<code>map</code> <code>Bundle</code> Aggregate of several logic types Union Logical type <code>Union</code> <code>Bundle</code> with tag \u201cpick one\u201d of several logic types Stream Logical type Bus to transport sequence of instance \u2013 Specify how to transport logic type Streamlet Hardware element <code>Interface</code> <code>Trait</code> with IO defs IO specification of component Impl Hardware element <code>Class</code> with functionality <code>Module</code> Inner structure of component <p>By being a super-set of ready-valid communication, like Chisel's <code>DecoupledIO</code>, and the AXI-Stream standard, Tydi-interfaces stay close to existing streaming implementations.</p> <p>See the work in publications for more details.</p>"},{"location":"tydi/integrations/tydi-chisel/#example","title":"Example","text":""},{"location":"tydi/integrations/tydi-chisel/#using-tydi-data-structures-and-streams","title":"Using Tydi data-structures and streams","text":"<p>The following example provides an overview of the declaration of a nested Tydi data structure and its usage in streams.</p> <p>In software, the declared data structure would look like</p> <pre><code>[\n  {\n    \"time\": 123456789,\n    \"nested\": {\n      \"a\": 5,\n      \"b\": true\n    },\n    \"message\": [\n      \"Hello\", \"this\", \"is\", \"a\", \"string.\"\n    ]\n  }\n]\n</code></pre> <p>For Tydi, this gives us the following structure</p> <p></p> <p>In Chisel, it can be expressed as follows</p> <p><pre><code>// Declaration of the data-structure \nclass Character extends BitsEl(8.W)\n\nclass NestedBundle extends Group {\n  val a: UInt = UInt(8.W)\n  val b: Bool = Bool()\n}\n\nclass TimestampedMessageBundle extends Group {\n  val time: UInt               = UInt(64.W)\n  val nested: NestedBundle     = new NestedBundle\n  // Create a 2D sub-stream of character data with 3 data-lanes\n  val message = new PhysicalStreamDetailed(Character, n = 3, d = 2, c = 7)\n}\n\n// Declaration of the module\nclass TimestampedMessageModule extends TydiModule {\n  // Create Tydi logical stream object\n  val stream = PhysicalStreamDetailed(new TimestampedMessageBundle, 1, c = 7)\n\n  // Create and connect physical streams as IO\n  // following the Tydi standard with concatenated data bitvector\n  val tydi_port_top   = stream.toPhysical\n  val tydi_port_child = stream.el.message.toPhysical\n\n  // \u2192 Assign values to logical stream group elements directly\n  stream.el.time := System.currentTimeMillis().U\n  stream.el.nested.a := 5.U\n  stream.el.nested.b := true.B\n  stream.el.message.data(0).value := 'H'.U\n  stream.el.message.data(1).value := 'e'.U\n  stream.el.message.data(2).value := 'l'.U\n  ...\n}\n</code></pre> See the timestamped_message file for the full example. This file is just for showing the syntax of declaring and using Tydi-interfaces. It does not contain an implementation. For that, look at the pipeline examples in the overview below. There you will also find advanced syntax for the creation of modules and chaining of submodules through their streams:</p> <pre><code>...\n\nclass PipelineExampleModule extends SimpleProcessorBase(new NumberGroup, new Stats) {\n  out := in.processWith(new NonNegativeFilter).processWith(new Reducer)\n}\n</code></pre>"},{"location":"tydi/integrations/tydi-chisel/#testing-a-tydimodule","title":"Testing a TydiModule","text":"<p>The code below shows a snippet from the pipeline example test code. It shows how to use the TydiStreamDriver to easily enqueue and dequeue data to sink and from source streams. Currently, this is only available for ChiselTest, and not ChiselSim. <pre><code>// Import stuff\n\nclass PipelineExampleTest extends AnyFlatSpec with ChiselScalatestTester {\n  behavior of \"PipelineExample\"\n\n  class PipelineWrap extends TydiTestWrapper(new PipelineExampleModule, new NumberGroup, new Stats)\n\n  it should \"process a sequence\" in {\n    // Test code\n    test(new PipelineWrap) { c =&gt;\n      // Initialize signals\n      c.in.initSource()\n      c.out.initSink()\n\n      // Generate list of random numbers\n      val nums = randomSeq(n = 50)\n      val stats = processSeq(nums) // Software impl.\n\n      // Test component\n      parallel({\n        for ((elem, i) &lt;- nums.zipWithIndex) {\n          c.in.enqueueElNow(_.time -&gt; i.U, _.value -&gt; elem.S)\n        }\n        c.in.enqueueEmptyNow(last = Some(c.in.lastLit(0 -&gt; 1.U)))\n      }, {\n        c.out.waitForValid()\n        // Utility for comprehensively printing stream state\n        println(c.out.printState(statsRenderer))\n        c.out.expectDequeue(_.min -&gt; stats.min.U, _.max -&gt; stats.max.U, _.sum -&gt; stats.sum.U, _.average -&gt; stats.average.U)\n      })\n    }\n  }\n}\n</code></pre> Look through the test examples for all functionality and syntax.</p>"},{"location":"tydi/integrations/tydi-chisel/#examples-overview","title":"Examples overview","text":"<ul> <li>Hello world \u2013 This example focuses on the physical interface structure.</li> </ul> Details It shows the signals of a Tydi interface carrying only a simple character stream.  <ul> <li>Timestamped message \u2013 This example focuses on building a data structure.</li> </ul> Details It shows advanced/nested usage of Tydi elements (<code>Group</code>, <code>Union</code>, <code>Stream</code>). It shows how a detailed stream with nested representation is broken out to separate standard physical streams.  <ul> <li>Pipeline \u2013 This example focuses on building modules with Tydi interfaces.</li> </ul> Details The example shows some implementations for modules in a pipeline executing basic tasks.  <ul> <li>Advanced pipeline \u2013 This example focuses on composing systems with Tydi modules.</li> </ul> Details A more advanced version of the normal pipeline example that uses syntax sugar and utilities to stitch together a higher throughput version of the pipeline.  <ul> <li>Big system, toolchain and utilities \u2013 Shows composition of a larger system with many streams and advanced data structures.</li> </ul> Details The system that is presented in this example uses of various Tydi-related utilities (e.g. related tools to construct a larger system. The example focuses on system composition like the one above and does not contain functionality for most modules. It contains several sections that each execute a common function in data-processing. Macroscopically, this system processes a compressed set of records about students and their grades for different courses and computes their similarity vectors. See the project-link or publication."},{"location":"tydi/integrations/tydi-chisel/#getting-started","title":"Getting started","text":""},{"location":"tydi/integrations/tydi-chisel/#acquire-the-lib","title":"Acquire the lib","text":"<p>To get started with Tydi-Chisel, you can either run it in your local development environment, or use the Tydi-tools docker container.</p> <p>For usage with <code>sbt</code> or <code>scala-cli</code>, the project package must first be built. Make sure you have <code>git</code>, <code>java</code>, and <code>sbt</code> installed and available in your path.</p> <pre><code>git clone https://github.com/abs-tudelft/Tydi-Chisel.git\nsbt publishLocal\n</code></pre>"},{"location":"tydi/integrations/tydi-chisel/#use-the-lib","title":"Use the lib","text":"<p>After this, the library can be added to your project's dependencies in your <code>build.sbt</code> like so.</p> <pre><code>libraryDependencies += \"nl.tudelft\" %% \"tydi-chisel\" % \"0.1.0\"\nlibraryDependencies += \"nl.tudelft\" %% \"tydi-chisel-test\" % \"0.1.0\" % Test\n</code></pre> <p>When using <code>scala-cli</code>, use the following directive: <pre><code>//&gt; using dep \"nl.tudelft::tydi-chisel::0.1.0\"\n</code></pre></p> <p>Then, one can import the functionality, and start to write Tydi-Chisel code!</p> <pre><code>import nl.tudelft.tydi_chisel._\n</code></pre> <p>Look through the examples for inspiration for the functionality and syntax.</p>"},{"location":"tydi/integrations/tydi-chisel/#features","title":"Features","text":"<p>Concretely, this project contains:</p> <ul> <li>Expressing Tydi stream interfaces in Chisel<ul> <li>Including nested stream support</li> <li>Being able to work with the detailed bundles inside your components</li> <li>Compliant with Tydi-standard for communication with components created outside of Chisel</li> <li>Simple stream connection</li> <li>Stream compatibility checks</li> <li>Helper functions for common signal use-cases</li> </ul> </li> <li>A stream-processing component chaining syntax</li> <li>Testing utilities<ul> <li><code>chisel-test</code> driver for Tydi stream interfaces.</li> </ul> </li> <li>Helper components<ul> <li>A stream complexity converter that can convert any incoming stream to the lowest source complexity</li> <li>A multi-processor or interleaving component that splits a multi-lane stream into multiple single lane streams for easy processing, merging them again after.</li> </ul> </li> <li>A Tydi-lang-2-Chisel transpiler\\   to convert Tydi interfaces described in Tydi-lang-2 to Chisel code utilizing the Tydi-Chisel library.</li> <li>A reverse-transpiler to share your Tydi-Chisel code as Tydi-lang-2 code</li> </ul>"},{"location":"tydi/integrations/tydi-chisel/#future-work","title":"Future work","text":"<ul> <li>Projects</li> <li>Provide more worked out real-life examples</li> <li>Create interoperability with Fletcher</li> <li>Investigate adoption of other hardware description languages</li> <li>Library</li> <li>Better Union support</li> <li>Interoperability with other streaming standards</li> <li>Improved error handling and design rule checks</li> <li>Additional helper components</li> <li>Testing and debugging</li> <li>Change testing front-end to the new ChiselSim framework.\\     This can currently not happen yet as ChiselSim still lacks support for <code>parallel</code> calls, which makes it hard to do asynchronous component testing.</li> <li>Improved tooling for enqueueing and dequeueing of test data</li> <li>Stream protocol compliance verification tooling</li> <li>Enhanced support for TyWaves<ul> <li>Provide more time-domain information</li> </ul> </li> </ul>"},{"location":"tydi/integrations/tydi-chisel/#publications","title":"Publications","text":"<ul> <li>C. Cromjongh, Y. Tian, Z. Al-Ars and H. P. Hofstee Hardware-Accelerator Design by Composition: Dataflow Component Interfaces With Tydi-Chisel   2024 IEEE Transactions on Very Large Scale Integration (VLSI) Systems, 4 October 2024. DOI: 10.1109/TVLSI.2024.3461330.</li> <li>C. Cromjongh, Y. Tian, Z. Al-Ars and H. P. Hofstee Enabling Collaborative and Interface-Driven Data-Streaming Accelerator Design with Tydi-Chisel   2023 IEEE Nordic Circuits and Systems Conference (NorCAS), 1 November 2023. DOI: 10.1109/NorCAS58970.2023.10305451.</li> </ul>"},{"location":"tydi/integrations/tydi-chisel/#license","title":"License","text":"<p>Tydi and this library are licensed under the Apache-2.0 license. See LICENSE.</p>"},{"location":"tydi/integrations/tydi-chisel/#related-tools","title":"Related Tools","text":"<ul> <li>Tydi-Lang-2\\ A tool for converting Tydi-lang code to a <code>json</code> representation of all logic types, streamlets, and implementations.</li> <li>Tydi-Lang-2-Chisel\\ Consequtively converts the <code>json</code> tydi definitions to Chisel code utilising Tydi-Chisel.</li> <li>TyWaves\\ A type based waveform viewer for Chisel and Tydi-Chisel, combining CIRCT debug output with the Surfer waveform viewer.</li> <li>Tydi repository\\ Contains Tydi standard documentation and first implementation of a compiler. </li> </ul>"},{"location":"tydi/integrations/tydi-clash/","title":"Tydi-Clash","text":""},{"location":"tydi/integrations/tydi-clash/#simple-starter-project","title":"Simple Starter Project","text":"<p>This starter project contains the scaffolding needed to integrate Clash with the Cabal and Stack build systems. It allows you to use dependencies from Hackage easily.</p>"},{"location":"tydi/integrations/tydi-clash/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting this project</li> <li>Building and testing this project<ul> <li>Stack (Windows, Linux, MacOS) [recommended]</li> <li>Cabal (Linux, MacOS)</li> <li>REPL</li> <li>IDE support</li> </ul> </li> <li>Project overview<ul> <li>tydi-clash.cabal</li> <li>cabal.project</li> <li>stack.yaml</li> <li>src/</li> <li>tests/</li> </ul> </li> <li>Change the license</li> </ul>"},{"location":"tydi/integrations/tydi-clash/#getting-this-project","title":"Getting this project","text":"<p>Stack users can run <code>stack new my-clash-project clash-lang/simple</code>. Cabal users can download a zip containing the project.</p>"},{"location":"tydi/integrations/tydi-clash/#building-and-testing-this-project","title":"Building and testing this project","text":"<p>There's a number of ways to build this project on your machine. The recommended way of doing so is using Stack, whose instructions will follow directly after this section.</p>"},{"location":"tydi/integrations/tydi-clash/#stack-windows-linux-macos-recommended","title":"Stack (Windows, Linux, MacOS) [recommended]","text":"<p>Install Stack using your package manager or refer to the How to install section of the Stack manual.</p> <p>Build the project with:</p> <pre><code>stack build\n</code></pre> <p>To run the tests defined in <code>tests/</code>, use:</p> <pre><code>stack test\n</code></pre> <p>To compile the project to VHDL, run:</p> <pre><code>stack run clash -- Example.Project --vhdl\n</code></pre> <p>You can find the HDL files in <code>vhdl/</code>. The source can be found in <code>src/Example/Project.hs</code>.</p>"},{"location":"tydi/integrations/tydi-clash/#cabal-linux-macos","title":"Cabal (Linux, MacOS)","text":"<p>The following instructions only work for Cabal &gt;=3.0 and GHC &gt;=8.4.</p> <p>First, update your cabal package database:</p> <pre><code>cabal update\n</code></pre> <p>You only have to run the update command once. After that, you can keep rebuilding your project by running the build command:</p> <pre><code>cabal build\n</code></pre> <p>To run the tests defined in <code>tests/</code>, use:</p> <pre><code>cabal run test-library\ncabal run doctests\n</code></pre> <p>To compile the project to VHDL, run:</p> <pre><code>cabal run clash -- Example.Project --vhdl\n</code></pre> <p>You can find the HDL files in <code>vhdl/</code>. The source can be found in <code>src/Example/Project.hs</code>.</p>"},{"location":"tydi/integrations/tydi-clash/#repl","title":"REPL","text":"<p>Clash offers a REPL as a quick way to try things, similar to Python's <code>python</code> or Ruby's <code>irb</code>. Stack users can open the REPL by invoking:</p> <pre><code>stack run clashi\n</code></pre> <p>Cabal users use:</p> <pre><code>cabal run clashi\n</code></pre>"},{"location":"tydi/integrations/tydi-clash/#ide-support","title":"IDE support","text":"<p>We currently recommend Visual Studio Code in combination with the Haskell plugin. All you need to do is open this folder in VSCode; it will prompt you to install the plugin.</p>"},{"location":"tydi/integrations/tydi-clash/#project-overview","title":"Project overview","text":"<p>This section will give a tour of all the files present in this starter project. It's also a general introduction into Clash dependency management. It's not an introduction to Clash itself though. If you're looking for an introduction to Clash, read \"Clash.Tutorial\" on Hackage.</p> <pre><code>tydi-clash\n\u251c\u2500\u2500 bin\n\u2502   \u251c\u2500\u2500 Clash.hs\n\u2502   \u2514\u2500\u2500 Clashi.hs\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 Example\n\u2502       \u2514\u2500\u2500 Project.hs\n\u251c\u2500\u2500\u2500 tests\n\u2502   \u251c\u2500\u2500 Tests\n\u2502   \u2502   \u2514\u2500\u2500 Example\n\u2502   \u2502       \u2514\u2500\u2500 Project.hs\n\u2502   \u251c\u2500\u2500 doctests.hs\n\u2502   \u2514\u2500\u2500 unittests.hs\n\u251c\u2500\u2500 cabal.project\n\u251c\u2500\u2500 tydi-clash.cabal\n\u2514\u2500\u2500 stack.yaml\n</code></pre>"},{"location":"tydi/integrations/tydi-clash/#tydi-clashcabal","title":"tydi-clash.cabal","text":"<p>This is the most important file in your project. It describes how to build your project. Even though it ends in <code>.cabal</code>, Stack will use this file too. It starts of with meta-information:</p> <pre><code>cabal-version:       2.4\nname:                tydi-clash\nversion:             0.1\nlicense:             BSD-2-Clause\nauthor:              John Smith &lt;john@example.com&gt;\nmaintainer:          John Smith &lt;john@example.com&gt;\n</code></pre> <p>If you decide to publish your code on Hackage, this will show up on your package's front page. Take note of the license, it's set to <code>BSD-2-Clause</code> by default, but this might bee too liberal for your project. You can use any of the licenses on spdx.org/licenses. If none of those suit, remove the <code>license</code> line, add <code>license-file: LICENSE</code>, and add a <code>LICENSE</code> file of your choice to the root of this project. Moving on:</p> <pre><code>common common-options\n  default-extensions:\n    BangPatterns\n    BinaryLiterals\n    ConstraintKinds\n    [..]\n    QuasiQuotes\n\n    -- Prelude isn't imported by default as Clash offers Clash.Prelude\n    NoImplicitPrelude\n</code></pre> <p>Clash's parent language is Haskell and its de-facto compiler, GHC, does a lot of heavy lifting before Clash gets to see anything. Because using Clash's Prelude requires a lot of extensions to be enabled to be used, we enable them here for all files in the project. Alternatively, you could add them where needed using <code>{-## LANGUAGE SomeExtension #-}</code> at the top of a <code>.hs</code> file instead. The next section, <code>ghc-options</code>, sets warning flags (<code>-Wall -Wcompat</code>) and flags that make GHC generate code Clash can handle.</p> <p>Note that this whole section is a <code>common</code> \"stanza\". We'll use it as a template for any other definitions (more on those later). The last thing we add to the common section is some build dependencies:</p> <pre><code>  build-depends:\n    base,\n    Cabal,\n\n    -- clash-prelude will set suitable version bounds for the plugins\n    clash-prelude &gt;= 1.8.2 &amp;&amp; &lt; 1.10,\n    ghc-typelits-natnormalise,\n    ghc-typelits-extra,\n    ghc-typelits-knownnat\n</code></pre> <p>These dependencies are fetched from Hackage, Haskell's store for packages. Next up is a <code>library</code> stanza. It defines where the source is located, in our case <code>src/</code>, and what modules can be found there. In our case that's just a single module, <code>Example.Project</code>.</p> <pre><code>library\n  import: common-options\n  hs-source-dirs: src\n  exposed-modules:\n    Example.Project\n  default-language: Haskell2010\n</code></pre> <p>Note that extra dependencies could be added by adding a <code>build-depends</code> line to this section. The following section defines a testsuite called doctests. Doctests are tests that are defined in the documentation of your project. We'll see this in action in src/.</p> <pre><code>test-suite doctests\n  type:             exitcode-stdio-1.0\n  default-language: Haskell2010\n  main-is:          doctests.hs\n  ghc-options:      -Wall -Wcompat -threaded\n  hs-source-dirs:   tests\n  build-depends:\n    base,\n    tydi-clash,\n    doctest-parallel &gt;= 0.2 &amp;&amp; &lt; 0.4,\n</code></pre> <p>Last but not least, another testsuite stanza is defined:</p> <pre><code>test-suite test-library\n  import: common-options\n  default-language: Haskell2010\n  hs-source-dirs: tests\n  type: exitcode-stdio-1.0\n  ghc-options: -threaded\n  main-is: unittests.hs\n  other-modules:\n    Tests.Example.Project\n  build-depends:\n    tydi-clash,\n    QuickCheck,\n    hedgehog,\n    tasty &gt;= 1.2 &amp;&amp; &lt; 1.6,\n    tasty-hedgehog,\n    tasty-th\n</code></pre> <p>These testsuites are executed when using <code>stack test</code> or <code>cabal test</code>. Note that Cabal swallows the output if more than one testsuite is defined, as is the case here. You might want to consider running the testsuites separately. More on tests in /tests.</p>"},{"location":"tydi/integrations/tydi-clash/#cabalproject","title":"cabal.project","text":"<p>A <code>cabal.project</code> file is used to configure details of the build, more info can be found in the Cabal user documentation. We use it to make Cabal always generate GHC environment files, which is a feature Clash needs when using Cabal.</p> <pre><code>packages:\n  tydi-clash.cabal\n\nwrite-ghc-environment-files: always\n</code></pre> <p><code>cabal.project</code> can be used to build multi-package projects, by extending <code>packages</code>.</p>"},{"location":"tydi/integrations/tydi-clash/#stackyaml","title":"stack.yaml","text":"<p>While Cabal fetches packages straight from Hackage (with a bias towards the latest versions), Stack works through snapshots. Snapshots are an index of packages from Hackage know to work well with each other. In addition to that, they specify a GHC version. These snapshots are curated by the community and FP Complete and can be found on stackage.org.</p> <pre><code>resolver: lts-19.32\n</code></pre> <p>This project uses lts-19.32, which includes Clash 1.6.4. Snapshots tightly couple GHC and package versions. By working this way, Stack projects build on a cohesive set of packages. Plus, it guarantees that if a <code>stack build</code> works now, it will work in 10 years too.</p> <p>Note: If you need a newer Clash version, simply change the version bounds in <code>tydi-clash.cabal</code> and follow the hints given by Stack.</p>"},{"location":"tydi/integrations/tydi-clash/#src","title":"src/","text":"<p>This is where the source code of the project lives, as specified in <code>tydi-clash.cabal</code>. It contains a single file, <code>Example/Project.hs</code> which starts with:</p> <pre><code>module Example.Project (topEntity, plus) where\n\nimport Clash.Prelude\n\n-- | Add two numbers. Example:\n--\n-- &gt;&gt;&gt; plus 3 5\n-- 8\nplus :: Signed 8 -&gt; Signed 8 -&gt; Signed 8\nplus a b = a + b\n</code></pre> <p><code>tydi-clash.cabal</code> enabled <code>NoImplicitPrelude</code> which enables the use of <code>Clash.Prelude</code> here. Next, a function <code>plus</code> is defined. It simply adds two numbers. Note that the example (<code>&gt;&gt;&gt; plus 3 5</code>) gets executed by the doctests defined for this project and checked for consistency with the result in the documentation (<code>8</code>).</p> <pre><code>-- | 'topEntity' is Clash's equivalent of 'main' in other programming\n-- languages. Clash will look for it when compiling 'Example.Project'\n-- and translate it to HDL. While polymorphism can be used freely in\n-- Clash projects, a 'topEntity' must be monomorphic and must use non-\n-- recursive types. Or, to put it hand-wavily, a 'topEntity' must be\n-- translatable to a static number of wires.\ntopEntity :: Signed 8 -&gt; Signed 8 -&gt; Signed 8\ntopEntity = plus\n</code></pre> <p>as the comment says <code>topEntity</code> will get compiled by Clash if we ask it to compile this module:</p> <pre><code>stack run clash -- Example.Project --vhdl\n</code></pre> <p>or</p> <pre><code>cabal run clash -- Example.Project --vhdl\n</code></pre> <p>We could instead ask it to synthesize <code>plus</code> instead:</p> <pre><code>stack run clash -- Example.Project --vhdl -main-is plus\n</code></pre> <p>If you want to play around with Clash, this is probably where you would put all the definitions mentioned in \"Clash.Tutorial\" on Hackage.</p>"},{"location":"tydi/integrations/tydi-clash/#tests","title":"tests/","text":"<p>Most of this directory is scaffolding, with the meat of the tests being defined in <code>tests/Tests/Example/Project.hs</code>. Writing good test cases is pretty hard: edge cases are easy to forget both in the implementation and tests. To this end, it's a good idea to use fuzz testing. In this project we use Hedgehog:</p> <pre><code>import Example.Project (plus)\n\nprop_plusIsCommutative :: H.Property\nprop_plusIsCommutative = H.property $ do\n  a &lt;- H.forAll (Gen.integral (Range.linear minBound maxBound))\n  b &lt;- H.forAll (Gen.integral (Range.linear minBound maxBound))\n  plus a b === plus b a\n</code></pre> <p>This test generates two numbers <code>a</code> and <code>b</code> that fit neatly into domain of <code>Signed 8</code>, thanks to the use of <code>minBound</code> and <code>maxBound</code>. It then tests whether the <code>plus</code> operation commutes. I.e., whether <code>a + b ~ b + a</code>. All functions called <code>prop_*</code> are collected automatically:</p> <pre><code>tests :: TestTree\ntests = $(testGroupGenerator)\n</code></pre> <p>We can run the tests using <code>stack test</code> or <code>cabal run test-library</code>:</p> <pre><code>.\n  Tests.Example.Project\n    plusIsCommutative: OK\n        \u2713 plusIsCommutative passed 100 tests.\n\nAll 1 tests passed (0.00s)\n</code></pre>"},{"location":"tydi/integrations/tydi-clash/#change-the-license","title":"Change the license","text":"<p>By default <code>tydi-clash.cabal</code> sets its <code>license</code> field to <code>BSD-2-Clause</code>. You might want to change this.</p>"},{"location":"tydi/integrations/vhdl/","title":"Tydi in VHDL","text":"<p>While there is no direct, currently maintained, implementation of Tydi interfaces in VHDL, there are some previous tools that are relevant for creating an implementation in VHDL.</p> <p>The TIL -&gt; VHDL tool allows generating VHDL boilerplate code for Tydi interfaces from an interface description in the Tidy Intermediate Language (TIL). This can be used in conjunction with V1 of Tydi-lang to write interfaces in Tydi-lang dialect instead.</p>"},{"location":"tydispec/","title":"Tydi specification","text":"<p>The Tydi specification, short for Typed dataflow interface specification, aims to provide a standardized way in which complex data types can be transferred from one circuit to another, within the context of FPGAs or ASICs.</p>"},{"location":"tydispec/#how-to-read-this-document","title":"How to read this document","text":"<p>The specification is comprised of the following sections.</p> <ul> <li> <p>Introduction: defines the motivation and scope of this    specification.</p> </li> <li> <p>Notation: defines the mathematical notation used by the    remainder of the specification.</p> </li> <li> <p>Physical stream specification. Physical streams are    hardware streams with their own valid/ready handshaking interface,    transporting elementary data and dimensionality information. Their exact    bit-level representation and transfer behavior is defined through five    parameters. These parameters are normally derived from logical streams.</p> </li> <li> <p>Logical stream specification. Logical streams are bundles    of one or multiple physical streams of some type from the Tydi type system.    Types expressed in this type system determine which physical streams with    which parameters make up the logical stream. This section also introduces    streamlets, the Tydi name for components that have logical streams as    inputs and/or outputs.</p> </li> </ul> <p>The two specification sections are written such that the first paragraph of each section defines a new concept, and the subsequent paragraphs constrain it.</p> <p>Additional information, such as examples, a more intuitive description, or motivation, is written in these kinds of blocks.</p>"},{"location":"tydispec/intro/","title":"Introduction","text":"<p>Note</p> <p>This technical specification of Tydi was written a few years ago before any real implementations using more advanced features of the spec were created. We are in the process of examining which parts of the specification may need to be revised. The majority of the content is, however, still relevant and correct.</p> <p>This section describes the motivation and scope of the Tydi specification.</p>"},{"location":"tydispec/intro/#background-and-motivation","title":"Background and motivation","text":"<p>As FPGAs become faster and larger, they are increasingly used within a data center context to accelerate computational workloads. FPGAs can already achieve greater compute density and power efficiency than CPUs and GPUs for certain types of workloads, particularly those that rely on high streaming throughput and branch-heavy computation. Examples of this are decompression, SQL query acceleration, and pattern matching. The major disadvantage of FPGAs is that they are more difficult to program than CPUs and GPUs, and that algorithms expressed imperatively in the CPU/GPU domain often need to be redesigned from the ground up to achieve competitive performance. Both the advantages and disadvantages are due to the spatial nature of an FPGA: instead of programming a number of processors, an FPGA designer \"programs\" millions of basic computational elements not much more complex than a single logic gate that all work parallel to each other, and describes how these elements are interconnected. This extreme programmability comes at a cost of roughly an order of magnitude in area and an order of magnitude in performance compared to the custom silicon used to make CPUs and GPUs. Therefore, while imperative algorithms can indeed be mapped to FPGAs more or less directly through high-level synthesis (HLS) techniques or the use of softcores, typically an algorithm needs at least two orders of magnitude of acceleration through clever use of the spatial nature of the FPGA to be competitive.</p> <p>Unfortunately, the industry-standard toolchains needed to program FPGAs only take VHDL, Verilog, SystemC, (more recently through HLS) a subset of C++, and/or visually designed data flow graphs as their input. The first three provide few abstractions above the level of a single wire: while they do allow the use of data types such as integers and structures to represent bundles of wires, all control of what the voltages on those bundles of wires represent at a certain point in time (if anything) remains up to the programmer. The latter two techniques raise the bar slightly by presenting the designer with streams and memory. However, they are vendor-specific, often require additional licensing fees over the more traditional design entry methods, and in some cases are even specific to a certain version of the vendor tool and/or a certain FPGA device family.</p> <p>This situation has given rise to a number of open-source projects that take higher-level languages and transform them to vendor-agnostic VHDL or Verilog. Examples of this are Chisel/FIRRTL and Clash, using generative Scala code and a Haskell-like functional programming language as their respective inputs. Both tools come with their own standard libraries of hardware components that can be used to compose accelerators out of smaller primitives, similar to the data flow design method described earlier, but with textual input and the advantage of being vendor and device agnostic.</p> <p>With the advent of these data flow composition tools, it is increasingly important to have a common interface standard to allow the primitive blocks to connect to each other. The de-facto standard for this has become the AMBA AXI4 interface, designed by ARM for their microcontrollers and processors. Roughly speaking, AXI4 specifies an interface for device-to-memory connections (AXI4 and AXI4-lite), and a streaming interface (AXI4-stream) for intra-device connections.</p> <p>While AXI4 and AXI4-lite are of primary importance to processors due to their memory-oriented nature, AXI4-stream is much more important for FPGAs due to their spatial nature. However, because AXI4-stream is not originally designed for FPGAs, parts of the specifications are awkward for this purpose. For instance, AXI4-stream is byte oriented: it requires its data signal to be divided into one or more byte lanes, and specifies (optional) control signals that indicate the significance of each lane. Since FPGA designs are not at all restricted to operating on byte elements, this part of the specification is often ignored, and as such, any stream with a <code>valid</code>, <code>ready</code>, and one or more <code>data</code> signals of any width has become the de-facto streaming standard. This is reflected for instance by Chisel's built-in <code>Decoupled</code> interface type.</p> <p>Within a single design this is of course not an issue \u2014 as long as both the stream source and sink blocks agree on the same noncompliant interface, the design will work. However, bearing in mind that there is an increasing number of independently developed data flow oriented tools, each with their own standard library, interoperability becomes an issue: whenever a designer needs to use components from different vendors, they must first ensure that the interfaces match, and if not, insert the requisite glue logic in between.</p> <p>A similar issue exists in the software domain, where different programming languages use different runtime environments and calling conventions. For instance, efficiently connecting a component written in Java to a component written in Python requires considerable effort. The keyword here is \"efficiently:\" because Java and Python have very different ways of representing abstract data in memory, one fundamentally has to convert from one representation to another for any communication between the two components. This serialization and deserialization overhead can and often does cost more CPU time than the execution of the algorithms themselves.</p> <p>The Apache Arrow project attempts to solve this problem by standardizing a way to represent this abstract data in memory, and providing libraries for popular programming languages to interact with this data format. The goal is to make transferring data between two processes as efficient as sharing a pool of Arrow-formatted memory between them. Arrow also specifies efficient ways of serializing Arrow data structures for (temporary) storage in files or streaming structures over a network, and can also be used by GPUs through CUDA. However, FPGA-based acceleration is at the time of writing missing from the core project. The Fletcher project attempts to bridge this gap, by providing an interface layer between the Arrow in-memory format and FPGA accelerators, presenting the memory to the accelerator in an abstract, tabular form.</p> <p>In order to represent the complex, nested data types supported by Arrow, the Fletcher project had to devise its own data streaming format on top of the de-facto subset of AXI4-stream. Originally, this format was simply a means to an end, and therefore, not much thought was put into it. Particularly, as only Arrow-to-device interfaces (and back) were needed for the project, an interface designed specifically for intra-device streaming is lacking; in fact, depending on configuration, the reader and writer interfaces do not even match completely. Clearly, a standard for streaming complex data types between components is needed, both within the context of the Fletcher project, and outside of it.</p> <p>As far as the writers are aware, no such standard exists as of yet. Defining such a standard in an open, royalty-free way is the primary purpose of this document.</p>"},{"location":"tydispec/intro/#goals","title":"Goals","text":"<ul> <li> <p>Defining a streaming format for complex data types in the context of FPGAs    and, potentially, ASICs, where \"complex data types\" include:</p> <ul> <li>multi-dimensional sequences of undefined length;</li> <li>unions (a.k.a. variants);</li> <li>structures such as tuples or records.</li> </ul> </li> <li> <p>Doing the above in as broad of a way as possible, without imposing    unnecessary burdens on the development of simple components.</p> </li> <li> <p>Allowing for minimization of area and complexity through well-defined    contracts between source and sink on top of the signal specification itself.</p> </li> <li> <p>Extensibility: this specification should be as usable as possible, even to    those with use cases not foreseen by this specification.</p> </li> </ul>"},{"location":"tydispec/intro/#non-goals","title":"Non-goals","text":"<ul> <li> <p>In this specification, a \"streaming format\" refers to the way in which the    voltages on a bundle of wires are used to communicate data. We expressly do    NOT mean streaming over existing communication formats such as Ethernet, and    certainly not over abstract streams such as POSIX pipes or other    inter-process communication paradigms. If you're looking for the former,    have a look at    Arrow Flight.    The latter is part of Apache Arrow itself through their    IPC format specification.</p> </li> <li> <p>We do not intend to compete with the AXI4(-stream) specification.    AXI4-stream is designed for streaming unstructured byte-oriented data;    Tydi streams are for streaming structured, complex data types.</p> </li> <li> <p>Tydi streams have no notion of multi-endpoint network-on-chip-like    structures. Adding source and destination addressing or other routing    information can be done through the <code>user</code> signal.</p> </li> <li> <p>The primitive data type in Tydi is a group of bits. We leave the mapping    from these bits to higher-order types such as numbers, characters, or    timestamps to existing specifications.</p> </li> </ul>"},{"location":"tydispec/logical/","title":"Logical streams","text":"<p>Note</p> <p>This technical specification of Tydi was written a few years ago before any real implementations using more advanced features of the spec were created. We are in the process of examining which parts of the specification may need to be revised. The majority of the content is, however, still relevant and correct.</p> <p>A Tydi logical stream consists of a bundle of physical streams and a group of user-defined signals, parameterized by way of a logical stream type. The logical stream type, in turn, represents some representation of an abstract data type (in the same way that for instance <code>std::vector</code> and <code>std::list</code> both represent a sequence in C++). Conceptually, the resulting logical stream can then be used to stream instances of its corresponding abstract data type from the source to the sink. The sink can only receive or operate on one instance at a time and only in sequence (hence the name \"stream\"), but the logical stream type can be designed such that the sink as random-access capability within the current instance.</p> <p>Because of the degree of flexibility in specifying Tydi logical streams, much of this specification consists of the formal definitions of the structures needed to describe a Tydi logical stream, and operations thereupon. The resulting constraints on the signal lists and behavior of the signals are then described based on these.</p>"},{"location":"tydispec/logical/#logical-stream-type","title":"Logical stream type","text":"<p>This structure is at the heart of the logical stream specification. It is used both to specify the type of a logical stream and internally for the process of lowering the recursive structure down to physical streams and signals.</p>"},{"location":"tydispec/logical/#structure","title":"Structure","text":"<p>The logical stream type is defined recursively by means of a number of node types. Two classes of nodes are defined: stream-manipulating nodes, and element-manipulating nodes. Only one stream-manipulating node exists (\\(\\textrm{Stream}\\)), which is defined in the first subsection. The remainder of the subsections describe the element-manipulating nodes.</p>"},{"location":"tydispec/logical/#stream","title":"Stream","text":"<p>The \\(\\textrm{Stream}\\) node is used to define a new physical stream. It is defined as \\(\\textrm{Stream}(T_e, t, d, s, c, r, T_u, x)\\), where:</p> <ul> <li> <p>\\(T_e\\) is any logical stream type, representing the type of element    carried by the logical stream;</p> <p>Note</p> <p>This may include additional \\(\\textrm{Stream}\\) nodes to handle cases such as structures containing sequences, handled in Tydi by transferring the two different dimensions over two different physical streams, as well as to encode request-response patterns.</p> </li> <li> <p>\\(t\\) is a positive real number, representing the minimum number of    elements that should be transferrable on the child stream per element in the    parent stream, or if there is no parent stream, the minimum number of    elements that should be transferrable per clock cycle;</p> <p>Note</p> <p>\\(t\\) is short for throughput ratio. As we'll see later, the \\(N\\) parameter for the resulting physical stream equals \\(\\left\\lceil\\prod t\\right\\rceil\\) for all ancestral \\(\\textrm{Stream}\\) nodes, including this node.</p> <p>This significance is as follows. Let's say that you have a structure like \\(\\textrm{Stream}(T_e = \\textrm{Group}(\\textrm{a}: \\textrm{Bits}(16), \\textrm{b}: \\textrm{Stream}(d = 1, T_e = \\textrm{Bits}(8), ...)), ...)\\), you're expecting that you'll be transferring about one of those groups every three cycles, and you're expecting that the list size of <code>b</code> will be about 8 on average. In this case, \\(t = 1/3\\) for the outer stream node, and \\(t = 8\\) for the inner stream node. That'll give you \\(\\lceil 1/3\\rceil = 1\\) element lane on the outer stream (used at ~33% efficiency) and \\(\\lceil 1/3 \\cdot 8\\rceil = 3\\) element lanes for the inner <code>b</code> stream (used at ~88% efficiency), such that neither stream will on average be slowing down the design.</p> </li> <li> <p>\\(d\\) is a nonnegative integer, representing the dimensionality of the    child stream with respect to the parent stream;</p> <p>Note</p> <p>As we'll see later, the \\(D\\) parameter for the resulting physical stream equals \\(\\sum d\\) for all ancestral \\(\\textrm{Stream}\\) nodes, including this node, up to and including the closest ancestor (or self) for which \\(s = \\textrm{Flatten}\\).</p> </li> <li> <p>\\(s\\) must be one of \\(\\textrm{Sync}\\), \\(\\textrm{Flatten}\\),    \\(\\textrm{Desync}\\), or \\(\\textrm{FlatDesync}\\), representing the    relation between the dimensionality information of the parent stream and the    child stream;</p> <p>Note</p> <p>The most common relation is \\(\\textrm{Sync}\\), which enforces that for each element in the parent stream, there must be one \\(d\\)-dimensional sequence in the child stream (if \\(d\\) is 0, that just means one element). Furthermore, it means that the <code>last</code> flags from the parent stream are repeated in the child stream.  This repetition is technically redundant; since the sink will have access to both streams, it only needs this information once to decode the data.</p> <p>If this redundant repetition is not necessary for the sink or hard to generate for a source, \\(\\textrm{Flatten}\\) may be used instead. It is defined in the same way, except the redundant information is not repeated for the child stream.</p> <p>Consider for example the data <code>[(1, [2, 3]), (4, [5])], [(6, [7])]</code>. If encoded as \\(\\textrm{Stream}(d=1, T_e=\\textrm{Group}(\\textrm{Bits}(8), \\textrm{Stream}(d=1, s=\\textrm{Sync}, ...)), ...)\\), the first physical stream will transfer <code>[1, 4], [6]</code>, and the second physical stream will transfer <code>[[2, 3], [5]], [[7]]</code>. If \\(\\textrm{Flatten}\\) is used for the inner \\(\\textrm{Stream}\\) instead, the data transferred by the second physical stream reduces to <code>[2, 3], [5], [7]</code>; the structure of the outer sequence is implied by the structure transferred by the first physical stream.</p> <p>\\(\\textrm{Desync}\\) may be used if the relation between the elements in the child and parent stream is dependent on context rather than the <code>last</code> flags in either stream. For example, for the type \\(\\textrm{Stream}(d=1, T_e=\\textrm{Group}(\\textrm{Bits}(8), \\textrm{Stream}(s=\\textrm{Desync}, ...)), ...)\\), if the first stream carries <code>[1, 4], [6]</code> as before, the child stream may carry anything of the form <code>[...], [...]</code>. That is, the dimensionality information (if any) must still match, but the number of elements in the innermost sequence is unrelated or only related by some user-defined context.</p> <p>\\(\\textrm{FlatDesync}\\), finally, does the same thing as \\(\\textrm{Desync}\\), but also strips the dimensionality information from the parent. This means there the relation between the two streams, if any, is fully user-defined.</p> </li> <li> <p>\\(c\\) is a complexity number, as defined in the physical stream    specification, representing the complexity for the corresponding physical    stream interface;</p> </li> <li> <p>\\(r\\) must be one of \\(\\textrm{Forward}\\) or \\(\\textrm{Reverse}\\),    representing the direction of the child stream with respect to the parent    stream, or if there is no parent stream, with respect to the direction of    the logical stream (source to sink);</p> <p>Note</p> <p>\\(\\textrm{Forward}\\) indicates that the child stream flows in the same direction as its parent, complementing the data of its parent in some way. Conversely, \\(\\textrm{Reverse}\\) indicates that the child stream acts as a response channel for the parent stream. If there is no parent stream, \\(\\textrm{Forward}\\) indicates that the stream flows in the natural source to sink direction of the logical stream, while \\(\\textrm{Reverse}\\) indicates a control channel in the opposite direction. The latter may occur for instance when doing random read access to a memory; the first stream carrying the read commands then flows in the sink to source direction.</p> </li> <li> <p>\\(T_u\\) is a logical stream type consisting of only element-manipulating    nodes, representing the <code>user</code> signals of the physical stream; that is,    transfer-oriented data (versus element-oriented data); and</p> <p>Note</p> <p>Note that while \\(T_u\\) is called a \"logical stream type\" for consistency, the \\(\\textrm{Stream}\\) node being illegal implies that no additional streams can be specified within this type.</p> </li> <li> <p>\\(x\\) is a boolean, representing whether the stream carries \"extra\"    information beyond the <code>data</code> and <code>user</code> signal payloads.</p> <p>Note</p> <p>\\(x\\) is normally false, which implies that the \\(\\textrm{Stream}\\) node will not result in a physical stream if both its <code>data</code> and <code>user</code> signals would be empty according to the rest of this specification; it is effectively optimized away. Setting \\(x\\) to true simply overrides this behavior.</p> <p>This optimization handles a fairly common case when the logical stream type is recursively generated by tooling outside the scope of this layer of the specification. It arises for instance for nested lists, which may result in something of the form \\(\\textrm{Stream}(d=1, T_e=\\textrm{Stream}(d=1, s=\\textrm{Sync}, T_e=...))\\). The outer stream is not necessary here; all the dimensionality information is carried by the inner stream.</p> <p>It could be argued that the above example should be reduced to \\(\\textrm{Stream}(d=2, s=\\textrm{Sync}, T_e=...)\\) by said external tool. Indeed, this description is equivalent. This reduction is however very difficult to define or specify in a way that it handles all cases intuitively, hence this more pragmatic solution was chosen.</p> </li> </ul> <p>Note</p> <p>As the \\(\\textrm{Stream}\\) node carries many parameters and can therefore be hard to read, some abbreviations are in order:</p> <ul> <li>\\(\\textrm{Dim}(T_e, t, c, T_u) \\ \\rightarrow\\ \\textrm{Stream}(T_e, t, 1, \\textrm{Sync},    c, \\textrm{Forward}, T_u, \\textrm{false})\\)</li> <li>\\(\\textrm{New}(T_e, t, c, T_u) \\ \\rightarrow\\ \\textrm{Stream}(T_e, t, 0, \\textrm{Sync},    c, \\textrm{Forward}, T_u, \\textrm{false})\\)</li> <li>\\(\\textrm{Des}(T_e, t, c, T_u) \\ \\rightarrow\\ \\textrm{Stream}(T_e, t, 0, \\textrm{Desync},  c, \\textrm{Forward}, T_u, \\textrm{false})\\)</li> <li>\\(\\textrm{Flat}(T_e, t, c, T_u)\\ \\rightarrow\\ \\textrm{Stream}(T_e, t, 0, \\textrm{Flatten}, c, \\textrm{Forward}, T_u, \\textrm{false})\\)</li> <li>\\(\\textrm{Rev}(T_e, t, c, T_u) \\ \\rightarrow\\ \\textrm{Stream}(T_e, t, 0, \\textrm{Sync},    c, \\textrm{Reverse}, T_u, \\textrm{false})\\)</li> </ul> <p>For the above abbreviations, the following defaults apply in addition:</p> <ul> <li>\\(T_u = \\textrm{Null}\\);</li> <li>\\(c =\\) complexity of parent stream (cannot be omitted if there is no    parent);</li> <li>\\(t = 1\\).</li> </ul>"},{"location":"tydispec/logical/#null","title":"Null","text":"<p>The \\(\\textrm{Null}\\) leaf node indicates the transferrence of one-valued data: the only valid value is \\(\\varnothing\\) (null).</p> <p>Note</p> <p>This is useful primarily when used within a \\(\\textrm{Union}\\), where the data type itself carries information. Furthermore, \\(\\textrm{Stream}\\) nodes carrying a \\(\\textrm{Null}\\) will always result in a physical stream (whereas \\(\\textrm{Stream}\\) nodes carrying only other streams will be \"optimized out\"), which may still carry dimensionality information, user data, or even just transfer timing information.</p>"},{"location":"tydispec/logical/#bits","title":"Bits","text":"<p>The \\(\\textrm{Bits}\\) leaf node, defined as \\(\\textrm{Bits}(b)\\), indicates the transferrence of \\(2^b\\)-valued data carried by means of a group of \\(b\\) bits, where \\(b\\) is a positive integer.</p> <p>Note</p> <p>Tydi does not specify how the bits should be interpreted: such interpretation is explicitly out of scope.</p>"},{"location":"tydispec/logical/#group","title":"Group","text":"<p>The \\(\\textrm{Group}\\) node acts as a product type (composition). It is defined as \\(\\textrm{Group}(N_1: T_1, N_2: T_2, ..., N_n: T_n)\\), where:</p> <ul> <li>\\(N_i\\) is a string consisting of letters, numbers, and/or underscores,    representing the name of the \\(i\\)th field;</li> <li>\\(T_i\\) is the logical stream type for the \\(i\\)th field;</li> <li>\\(n\\) is a nonnegative integer, representing the number of fields.</li> </ul> <p>Note</p> <p>Intuitively, each instance of type \\(\\textrm{Group}(...)\\) consists of instances of all the contained types. This corresponds to a <code>struct</code> or <code>record</code> in most programming languages.</p> <p>The names cannot contain two or more consecutive underscores.</p> <p>Note</p> <p>Double underscores are used by Tydi as a hierarchy separator when flattening structures for the canonical representation. If not for the above rule, something of the form \\(\\textrm{Group}(\\textrm{'a'}:\\textrm{Group}(\\textrm{'b__c'}:...),\\textrm{'a__b'}:\\textrm{Group}(\\textrm{'c'}:...))\\) would result in a name conflict: both signals would be named <code>a__b__c</code>.</p> <p>The names cannot start or end with an underscore.</p> <p>The names cannot start with a digit.</p> <p>The names cannot be empty.</p> <p>The names must be case-insensitively unique within the group.</p> <p>Note</p> <p>The above requirements on the name mirror the requirements on the field names for the physical streams.</p>"},{"location":"tydispec/logical/#union","title":"Union","text":"<p>The \\(\\textrm{Union}\\) node acts as a sum type (exclusive disjunction). It is defined as \\(\\textrm{Union}(N_1: T_1, N_2: T_2, ..., N_n: T_n)\\), where:</p> <ul> <li>\\(N_i\\) is a string consisting of letters, numbers, and/or underscores,    representing the name of the \\(i\\)th field;</li> <li>\\(T_i\\) is the logical stream type for the \\(i\\)th field;</li> <li>\\(n\\) is a positive integer, representing the number of fields.</li> </ul> <p>Note</p> <p>Intuitively, each instance of type \\(\\textrm{Union}\\) consists of an instance of one the contained types (also known as variants), as well as a tag indicating which field that instance belongs to. This corresponds to a <code>union</code> or <code>enum</code> in most programming languages. Mathematically, Tydi unions represent tagged unions.</p> <p>One might argue that unions could also be specified without the \\(\\textrm{Union}\\) node, by simply grouping the variants together along with a manually specified \\(\\textrm{Bits}\\) field for the union tag, and using don't-cares for the variants not selected through the tag field. However, there are a number of downsides to such a sparse union approach.</p> <ul> <li>For unions with many variants, the <code>data</code> signal of the corresponding    stream becomes very wide.</li> <li>Any streams nested inside the union variants would need to be stuffed    with don't-care transfers as well, which may result in additional    control logic, delay, area, etc..</li> </ul> <p>While such sparse unions have their place, dense unions can be more suitable for a given application. These could also be represented without a \\(\\textrm{Union}\\) node, but not in a nicely recursive manner without loss of information about the variant types. Therefore, (dense) unions were made a first-class type through \\(\\textrm{Union}\\).</p> <p>\\(\\textrm{Union}\\)s can also be used to elegantly describe nullable types. The pattern for that is simply \\(\\textrm{Union}(\\textrm{Null}, T)\\). In this case, the union's tag field acts like a validity bit.</p> <p>The names cannot contain two or more consecutive underscores.</p> <p>Note</p> <p>Double underscores are used by Tydi as a hierarchy separator when flattening structures for the canonical representation. If not for the above rule, something of the form \\(\\textrm{Union}(\\textrm{'a'}:\\textrm{Union}(\\textrm{'b__c'}:\\textrm{Stream}...),\\textrm{'a__b'}:\\textrm{Union}(\\textrm{'c'}:\\textrm{Stream}...))\\) would result in a name conflict: both physical streams would be named <code>a__b__c</code>.</p> <p>The names cannot start or end with an underscore.</p> <p>The names cannot start with a digit.</p> <p>The names cannot be empty.</p> <p>The names must be case-insensitively unique within the union.</p> <p>Note</p> <p>The above requirements on the name mirror the requirements on the field names for the physical streams.</p>"},{"location":"tydispec/logical/#operations-on-logical-stream","title":"Operations on logical stream","text":"<p>This section defines some operations that may be performed on logical stream types, most importantly the \\(\\textrm{synthesize}()\\) function, which returns the signals and physical streams for a given type.</p>"},{"location":"tydispec/logical/#null-detection-function","title":"Null detection function","text":"<p>This section defines the function \\(\\textrm{isNull}(T_{in}) \\rightarrow \\textrm{Bool}\\), which returns true if and only if \\(T_{in}\\) does not result in any signals.</p> <p>The function returns true if and only if one or more of the following rules match:</p> <ul> <li> <p>\\(T_{in} = \\textrm{Stream}(T_e, t, d, s, c, r, T_u, x)\\),    \\(\\textrm{isNull}(T_e)\\) is true, \\(\\textrm{isNull}(T_u)\\) is true,    and \\(x\\) is false;</p> </li> <li> <p>\\(T_{in} = \\textrm{Null}\\);</p> </li> <li> <p>\\(T_{source} = \\textrm{Group}(N_1: T_1, N_2: T_2, ..., N_n: T_n)\\) and    \\(\\textrm{isNull}(T_i)\\) is true for all \\(i \\in (1, 2, ..., n)\\); or</p> </li> <li> <p>\\(T_{source} = \\textrm{Union}(N_1: T_1)\\) and \\(\\textrm{isNull}(T_1)\\)    is true.</p> <p>Note</p> <p>Note that any union with more than one field is not null regardless of its types, because the union tag also carries information in that case.</p> </li> </ul>"},{"location":"tydispec/logical/#split-function","title":"Split function","text":"<p>This section defines the function \\(\\textrm{split}(T_{in}) \\rightarrow \\textrm{SplitStreams}\\), where \\(T_{in}\\) is any logical stream type. The \\(\\textrm{SplitStreams}\\) node is defined as \\(\\textrm{SplitStreams}(T_{signals}, N_1 : T_1, N_2 : T_2, ..., N_n : T_n)\\), where:</p> <ul> <li>\\(T_{signals}\\) is a logical stream type consisting of only    element-manipulating nodes;</li> <li>all \\(T_{1..n}\\) are \\(\\textrm{Stream}\\) nodes with the data and user    subtypes consisting of only element-manipulating nodes;</li> <li>all \\(N\\) are case-insensitively unique, emptyable strings consisting of    letters, numbers, and/or underscores, not starting or ending in an    underscore, and not starting with a digit; and</li> <li>\\(n\\) is a nonnegative integer.</li> </ul> <p>Note</p> <p>Intuitively, it splits a logical stream type up into simplified stream types, where \\(T_{signals}\\) contains only the information for the user-defined signals, and \\(T_i\\) contains only the information for the physical stream with index \\(i\\) and name \\(N_i\\).</p> <p>The names can be empty, because if there are no \\(Group\\)s or \\(Union\\)s, the one existing stream or signal will not have an intrinsic name given by the type. Empty strings are represented here with \\(\\varnothing\\). Note that the names here can include double underscores.</p> <p>\\(\\textrm{split}(T_{in})\\) is evaluated as follows.</p> <ul> <li> <p>If \\(T_{in} = \\textrm{Stream}(T_e, t, d, s, c, r, T_u, x)\\), apply the    following algorithm.</p> <ul> <li>Initialize \\(N\\) and \\(T\\) to empty lists.</li> <li>\\(T_{element} := \\textrm{split}(T_e)_{signals}\\) (i.e., the   \\(T_{signals}\\) item of the tuple returned by the \\(\\textrm{split}\\)   function)</li> <li>If \\(\\textrm{isNull}(T_{element})\\) is false, \\(\\textrm{isNull}(T_u)\\)   is false, or \\(x\\) is true:</li> <li>Append \\(\\varnothing\\) (an empty name) to the end of \\(N\\).</li> <li>Append \\(\\textrm{Stream}(T_{element}, t, d, s, c, r, T_u, x)\\) to the end      of \\(T\\).</li> <li>Extend \\(N\\) with \\(\\textrm{split}(T_e)_{names}\\) (i.e.,   all stream names returned by the \\(\\textrm{split}\\) function).</li> <li>For all \\(T' \\in \\textrm{split}(T_e)_{streams}\\) (i.e.,   for all named streams returned by the \\(\\textrm{split}\\) function):</li> <li>Unpack \\(T'\\) into \\(\\textrm{Stream}(T'_d, t', d', s', c', r', T'_u, x')\\).      This is always possible due to the postconditions of      \\(\\textrm{split}\\).</li> <li>If \\(r = \\textrm{Reverse}\\), reverse the direction of \\(r'\\).</li> <li>If \\(s = \\textrm{Flatten}\\) or \\(s = \\textrm{FlatDesync}\\),      assign \\(s' := \\textrm{FlatDesync}\\).</li> <li>If \\(s' \\ne \\textrm{Flatten}\\) and \\(s \\ne \\textrm{FlatDesync}\\),      assign \\(d' := d' + d\\).</li> <li>\\(t' := t' \\cdot t\\).</li> <li>Append \\(\\textrm{Stream}(T'_d, t', d', s', c', r', T'_u, x')\\) to      \\(T\\).</li> <li>Return \\(\\textrm{SplitStreams}(\\textrm{Null}, N_1 : T_1, N_2 : T_2, ..., N_m : T_m)\\).</li> </ul> </li> <li> <p>If \\(T_{in} = \\textrm{Null}\\) or \\(T_{in} = \\textrm{Bits}(b)\\),    return \\(\\textrm{SplitStreams}(T_{in})\\).</p> </li> <li> <p>If \\(T_{in} = \\textrm{Group}(N_{g,1} : T_{g,1}, N_{g,2} : T_{g,2}, ..., N_{g,n} : T_{g,n})\\),    apply the following algorithm.</p> <ul> <li>\\(T_{signals} := \\textrm{Group}(N_{g,1} : \\textrm{split}(T_{g,1})_{signals}, ..., N_{g,n} : \\textrm{split}(T_{g,n})_{signals})\\)   (i.e., replace the types contained by the group with the   \\(T_{signals}\\) item of the tuple returned by the \\(\\textrm{split}\\)   function applied to the original types).</li> <li>Initialize \\(N\\) and \\(T\\) to empty lists.</li> <li>For all \\(i \\in 1..n\\):</li> <li>For all \\(\\textrm{name} \\in \\textrm{split}(T_{g,i})_{names}\\) (i.e.,      for all stream names returned by the \\(\\textrm{split}\\) function),<ul> <li>If \\(\\textrm{name} = \\varnothing\\), append \\(N_{g,i}\\) to the end     of \\(N\\).</li> <li>Otherwise, append the concatenation \\(N_{g,i}\\) and \\(\\textrm{name}\\)     to the end of \\(N\\), separated by a double underscore.</li> </ul> </li> <li>Extend \\(T\\) with \\(\\textrm{split}(T_{g,i})_{streams}\\) (i.e.,      all named streams returned by the \\(\\textrm{split}\\) function).</li> <li>Return \\(\\textrm{SplitStreams}(T_{signals}, N_1 : T_1, N_2 : T_2, ..., N_m : T_m)\\),   where \\(m = |N| = |T|\\).</li> </ul> </li> <li> <p>If \\(T_{in} = \\textrm{Union}(N_{u,1} : T_{u,1}, N_{u,2} : T_{u,2}, ..., N_{u,n} : T_{u,n})\\),    apply the following algorithm.</p> <ul> <li>\\(T_{signals} := \\textrm{Union}(N_{u,1} : \\textrm{split}(T_{u,1})_{signals}, ..., N_{u,n} : \\textrm{split}(T_{u,n})_{signals})\\)   (i.e., replace the types contained by the group with the   \\(T_{signals}\\) item of the tuple returned by the \\(\\textrm{split}\\)   function applied to the original types).</li> <li>Initialize \\(N\\) and \\(T\\) to empty lists.</li> <li>For all \\(i \\in 1..n\\):</li> <li>For all \\(\\textrm{name} \\in \\textrm{split}(T_{u,i})_{names}\\) (i.e.,      for all stream names returned by the \\(\\textrm{split}\\) function),<ul> <li>If \\(\\textrm{name} = \\varnothing\\), append \\(N_{u,i}\\) to the end     of \\(N\\).</li> <li>Otherwise, append the concatenation \\(N_{u,i}\\) and \\(\\textrm{name}\\)     to the end of \\(N\\), separated by a double underscore.</li> </ul> </li> <li>Extend \\(T\\) with \\(\\textrm{split}(T_{u,i})_{streams}\\) (i.e.,      all named streams returned by the \\(\\textrm{split}\\) function).</li> <li>Return \\(\\textrm{SplitStreams}(T_{signals}, N_1 : T_1, N_2 : T_2, ..., N_m : T_m)\\),   where \\(m = |N| = |T|\\).</li> </ul> </li> </ul> <p>Note</p> <p>Note that the algorithm for \\(\\textrm{Group}\\) and \\(\\textrm{Union}\\) is the same, aside from returning \\(\\textrm{Group}\\) vs \\(\\textrm{Union}\\) nodes for \\(T_{signals}\\).</p>"},{"location":"tydispec/logical/#field-conversion-function","title":"Field conversion function","text":"<p>This section defines the function \\(\\textrm{fields}(T_{in}) \\rightarrow \\textrm{Fields}\\), where \\(T_{in}\\) is any logical stream type, and the \\(\\textrm{Fields}\\) node is as defined in the physical stream specification.</p> <p>Note</p> <p>Intuitively, this function flattens a logical stream type consisting of \\(\\textrm{Null}\\), \\(\\textrm{Bits}\\), \\(\\textrm{Group}\\) and \\(\\textrm{Union}\\) nodes into a list of named bitfields. It is used for constructing the data and user field lists of the physical streams and the user-defined signal list from the logical stream types preprocessed by \\(\\textrm{split}()\\). This function is normally only applied to logical stream types that only carry element-manipulating nodes.</p> <p>The names can be empty, because if there are no \\(Group\\)s or \\(Union\\)s, the one existing stream or signal will not have an intrinsic name given by the type. Empty strings are represented here with \\(\\varnothing\\). Note that the names here can include double underscores.</p> <p>\\(\\textrm{fields}(T_{in})\\) is evaluated as follows.</p> <ul> <li> <p>If \\(T_{in} = \\textrm{Null}\\) or    \\(T_{in} = \\textrm{Stream}(T_e, t, d, s, c, r, T_u, x)\\), return    \\(\\textrm{Fields}()\\).</p> </li> <li> <p>If \\(T_{in} = \\textrm{Bits}(b)\\), return    \\(\\textrm{Fields}(\\varnothing : b)\\).</p> </li> <li> <p>If \\(T_{in} = \\textrm{Group}(N_{g,1} : T_{g,1}, N_{g,2} : T_{g,2}, ..., N_{g,n} : T_{g,n})\\),    apply the following algorithm.</p> <ul> <li>Initialize \\(N_o\\) and \\(b_o\\) to empty lists.</li> <li>For all \\(i \\in 1..n\\):</li> <li>Unpack \\(\\textrm{fields}(T_{g,i})\\) into      \\(\\textrm{Fields}(N_{e,1} : b_{e,1}, N_{e,2} : b_{e,2}, ..., N_{e,m} : b_{e,m})\\).</li> <li>For all \\(j \\in 1..m\\):<ul> <li>If \\(N_{e,j} = \\varnothing\\), append \\(N_{g,i}\\) to the end     of \\(N_o\\). Otherwise, append the concatenation of \\(N_{g,i}\\)     and \\(N_{e,j}\\), separated by a double underscore, to the end of     \\(N_o\\).</li> <li>Append \\(b_{e,j}\\) to the end of \\(b_o\\).</li> </ul> </li> <li>Return \\(\\textrm{Fields}(N_{o,1} : b_{o,1}, N_{o,2} : b_{o,2}, ..., N_{o,p} : b_{o,p})\\),   where \\(p = |N_o| = |b_o|\\).</li> </ul> </li> <li> <p>If \\(T_{in} = \\textrm{Union}(N_{u,1} : T_{u,1}, N_{u,2} : T_{u,2}, ..., N_{u,n} : T_{u,n})\\),    apply the following algorithm.</p> <ul> <li>Initialize \\(N_o\\) and \\(b_o\\) to empty lists.</li> <li>If \\(n &gt; 1\\):</li> <li>Append <code>\"tag\"</code> to the end of \\(N_o\\).</li> <li>Append \\(\\left\\lceil\\log_2 n\\right\\rceil\\) to the end of \\(b_o\\).</li> <li>\\(b_d := 0\\)</li> <li>For all \\(i \\in 1..n\\):</li> <li>Unpack \\(\\textrm{fields}(T_{g,i})\\) into      \\(\\textrm{Fields}(N_{e,1} : b_{e,1}, N_{e,2} : b_{e,2}, ..., N_{e,m} : b_{e,m})\\).</li> <li>\\(b_d := \\max\\left(b_d, \\sum_{j=1}^m b_{e,j}\\right)\\)</li> <li>If \\(b_d &gt; 0\\):</li> <li>Append <code>\"union\"</code> to the end of \\(N_o\\).</li> <li>Append \\(b_d\\) to the end of \\(b_o\\).</li> <li>Return \\(\\textrm{Fields}(N_{o,1} : b_{o,1}, N_{o,2} : b_{o,2}, ..., N_{o,p} : b_{o,p})\\),   where \\(p = |N_o| = |b_o|\\).</li> </ul> </li> </ul>"},{"location":"tydispec/logical/#synthesis-function","title":"Synthesis function","text":"<p>This section defines the function \\(\\textrm{synthesize}(T_{in}) \\rightarrow \\textrm{LogicalStream}\\), where \\(T_{in}\\) is any logical stream type. The \\(\\textrm{LogicalStream}\\) node is defined as \\(\\textrm{LogicalStream}(F_{signals}, N_1 : P_1, N_2 : P_2, ..., N_n : P_n)\\), where:</p> <ul> <li> <p>\\(F_{signals}\\) is of the form    \\(\\textrm{Fields}(N_{s,1} : b_{s,1}, N_{s,2} : b_{s,2}, ..., N_{s,m} : b_{s,m})\\),    as defined in the physical stream specification;</p> <p>Note</p> <p>This represents the list of user-defined signals flowing in parallel to the physical streams.</p> </li> <li> <p>all \\(P\\) are of the form \\(\\textrm{PhysicalStream}(E, N, D, C, U)\\), as    defined in the physical stream specification;</p> </li> <li> <p>all \\(N\\) are case-insensitively unique, emptyable strings consisting of    letters, numbers, and/or underscores, not starting or ending in an    underscore, and not starting with a digit; and</p> </li> <li> <p>\\(n\\) is a nonnegative integer.</p> </li> </ul> <p>Note</p> <p>Intuitively, this function synthesizes a logical stream type to its physical representation.</p> <p>\\(\\textrm{synthesize}(T_{in})\\) is evaluated as follows.</p> <ul> <li>Unpack \\(\\textrm{split}(T_{in})\\) into    \\(\\textrm{SplitStreams}(T_{signals}, N_1 : T_1, N_2 : T_2, ..., N_n : T_n)\\).</li> <li>\\(F_{signals} := \\textrm{fields}(T_{signals})\\)</li> <li>For all \\(i \\in (1, 2, ..., n)\\):<ul> <li>Unpack \\(T_i\\) into \\(\\textrm{Stream}(T_e, t, d, s, c, r, T_u, x)\\).</li> <li>\\(P_i := \\textrm{PhysicalStream}(\\textrm{fields}(T_e), \\lceil t\\rceil, d, c, \\textrm{fields}(T_u))\\)</li> </ul> </li> <li>Return \\(\\textrm{LogicalStream}(F_{signals}, N_1 : P_1, N_2 : P_2, ..., N_n : P_n)\\).</li> </ul>"},{"location":"tydispec/logical/#type-compatibility-function","title":"Type compatibility function","text":"<p>This section defines the function \\(\\textrm{compatible}(T_{source}, T_{sink}) \\rightarrow \\textrm{Bool}\\), where \\(T_{source}\\) and \\(T_{sink}\\) are both logical stream types. The function returns true if and only if a source of type \\(T_{source}\\) can be connected to a sink of type \\(T_{sink}\\) without insertion of conversion logic. The function returns true if and only if one or more of the following rules match:</p> <ul> <li> <p>\\(T_{source} = T_{sink}\\);</p> </li> <li> <p>\\(T_{source} = \\textrm{Stream}(T_e, t, d, s, c, r, T_u, x)\\),    \\(T_{sink} = \\textrm{Stream}(T'_d, t, d, s, c', r, T_u, x)\\),    \\(\\textrm{compatible}(T_e, T'_d) = \\textrm{true}\\), and \\(c &lt; c'\\);</p> </li> <li> <p>\\(T_{source} = \\textrm{Group}(N_1: T_1, N_2: T_2, ..., N_n: T_n)\\),    \\(T_{sink} = \\textrm{Group}(N_1: T'_1, N_2: T'_2, ..., N_n: T'_n)\\),    and \\(\\textrm{compatible}(T_i, T'_i)\\) is true for all    \\(i \\in (1, 2, ..., n)\\); or</p> </li> <li> <p>\\(T_{source} = \\textrm{Union}(N_1: T_1, N_2: T_2, ..., N_n: T_n)\\),    \\(T_{sink} = \\textrm{Union}(N_1: T'_1, N_2: T'_2, ..., N_n: T'_n)\\),    and \\(\\textrm{compatible}(T_i, T'_i)\\) is true for all    \\(i \\in (1, 2, ..., n)\\).</p> </li> </ul> <p>The name matching is to be done case sensitively.</p> <p>Note</p> <p>While two streams may be compatible in a case-insensitive language when only the case of one or more of the names differ, this would still not hold for case-sensitive languages. Therefore, for two streams to be compatible in all cases, the matching must be case sensitive.</p>"},{"location":"tydispec/logical/#union-semantics","title":"Union semantics","text":"<p>When flattened into fields, a \\(\\textrm{Union}\\) node consists of:</p> <ul> <li>if there are two or more variants, a <code>\"tag\"</code> field of size    \\(\\left\\lceil\\log_2{n}\\right\\rceil\\), where \\(n\\) is the number of    variants; and</li> <li>if any variant carries data in the same stream as the union itself, a    <code>\"union\"</code> field of size\\    \\(\\max\\limits_{\\textrm{variants}} \\sum\\limits_{\\textrm{subfields}} b_{\\textrm{subfield}}\\).</li> </ul> <p>The <code>\"tag\"</code> field is used to represent which variant is being represented, by means of a zero-based index encoded as an unsigned binary number.</p> <p>It is illegal for a source to drive the <code>\"tag\"</code> field of a \\(\\textrm{Union}\\) with \\(n\\) variants to \\(n\\) or higher.</p> <p>Note</p> <p>The above would otherwise be possible if \\(n\\) is not a power of two.</p> <p>The <code>\"union\"</code> field of a \\(\\textrm{Union}\\) is used to represent variant data existing in the same stream as the union itself. It consists of the LSB-first, LSB-aligned concatenation of the fields of the variant.</p> <p>Note</p> <p>No constraint is placed on the value that the source drives on the pad bits.</p> <p>The physical streams represented by \\(\\textrm{Stream}\\) nodes nested inside \\(\\textrm{Union}\\) variant types behave as if any other variants carried by the parent stream do not exist, but are otherwise synchronized to the parent stream as defined by the \\(s\\) parameter of the child stream.</p> <p>Example</p> <p>Consider the following example, keeping \\(x\\) generic for now:</p> <p>\\[B = \\textrm{Group}(x: \\textrm{Bits}(2), y: \\textrm{Bits}(2))\\\\ C = \\textrm{Stream}(d=1, s=x, T_e=\\textrm{Bits}(4))\\\\ U = \\textrm{Union}(\\textrm{a} : \\textrm{Bits}(3), \\textrm{b} : \\textrm{B}, \\textrm{c} : C)\\\\ \\textrm{Stream}(d=1, T_e=U)\\]</p> <p>This results in two physical streams:</p> <ul> <li>the unnamed stream carrying the union with \\(D = 1\\), consisting of a    two-bit field named <code>tag</code> and a four-bit field named <code>union</code>; and</li> <li>a stream named <code>c</code>, consisting of a single unnamed four-bit field.</li> </ul> <p>Let's say that we need to represent the data <code>[a:0, b:(x:1, y:2)], [c:[3, 4, 5], a:6]</code>. The unnamed stream then carries the following four transfers, regardless of the value for \\(x\\):</p> <pre><code>[ (tag: \"00\", union: \"-000\"),     (1)\n  (tag: \"01\", union: \"1001\") ],   (2)\n[ (tag: \"10\", union: \"----\"),     (3)\n  (tag: \"00\", union: \"-110\") ]    (4)\n</code></pre> <p>In transfer 1 and 4, the MSB of the <code>union</code> is don't-care, because variant <code>a</code> uses only three bits. In transfer 2, <code>x</code> is represented by the two LSB of the <code>union</code> field, while <code>y</code> is represented by the MSBs. Finally, in transfer 3, all bits of <code>union</code> are don't-care, as stream <code>c</code> is used to carry the data. Note that a <code>tag</code> value of <code>\"11\"</code> is illegal in this example.</p> <p>When \\(x = \\textrm{Sync}\\), stream <code>c</code> has \\(D = 2\\) and carries the following transfers:</p> <pre><code>[              ],   (1)\n[ [ (\"0011\"),       (2)\n    (\"0100\"),       (3)\n    (\"0101\") ] ]    (4)\n</code></pre> <p>Transfer 1 carries an empty outer sequence, corresponding to <code>[a:0, b:(x:1, y:2)]</code> of the represented data. There are no inner sequences because variant <code>c</code> never occurs in the first sequence, but the outer sequence must still be represented to correctly copy the dimensionality information of the parent stream, as mandated by the \\(\\textrm{Sync}\\) tag. The second outer sequence represents <code>[c:[3, 4, 5], a:6]</code>; it carries one inner sequence, because variant <code>c</code> occurs once. The inner sequence directly corresponds to <code>[3, 4, 5]</code>.</p> <p>When \\(x = \\textrm{Flatten}\\), the outer sequence is flattened away. Therefore, stream <code>c</code> has \\(D = 1\\) and carries only the following transfers:</p> <pre><code>[ (\"0011\"),     (1)\n  (\"0100\"),     (2)\n  (\"0101\") ]    (3)\n</code></pre> <p>It is then up to the sink to recover the outer dimension if it needs it.</p> <p>When \\(x = \\textrm{Desync}\\), \\(D = 2\\) as before. For the example data, the transfers would be exactly the same as for \\(x = \\textrm{Sync}\\), but the zero-or-more relationship defined by the \\(\\textrm{Desync}\\) means that a <code>c</code> variant in the parent stream may correspond with any number of inner sequences on the <code>c</code> stream. That does however still mean that the first outer sequence must be empty, as follows:</p> <pre><code>[         ],\n[ [ ... ]\n    ...\n  [ ... ] ]\n</code></pre> <p>After all, there are no <code>c</code> variants in the first sequence to apply the zero-or-more relationship to.</p> <p>Finally, \\(x = \\textrm{FlatDesync}\\) flattens the outer sequence away compared to \\(x = \\textrm{Desync}\\), allowing for any number of transfers to occur on the <code>c</code> stream, all corresponding to the <code>c</code> variant in transfer 3 of the parent stream.</p> <p>If you're confused as to how a sink is to determine which transfers on the <code>c</code> stream correspond to which <code>c</code> variant in the parent stream, recall that the purpose of \\(\\textrm{Desync}\\) and \\(\\textrm{FlatDesync}\\) is to allow the user of this layer of the specification to define this relation as they see fit. Usually, a pattern of the form \\(\\textrm{Group}(\\textrm{len}: \\textrm{Bits}(...), \\textrm{data}: \\textrm{Stream}(s=\\textrm{Desync}, ...))\\) would be used, in which case the length of the encoded inner sequence would be transferred using the <code>union</code> field of the parent stream.</p>"},{"location":"tydispec/logical/#natural-ordering-and-inter-stream-dependencies","title":"Natural ordering and inter-stream dependencies","text":"<p>The natural ordering of a datum transferred over a logical stream is defined as follows:</p> <ul> <li> <p>for \\(\\textrm{Group}\\) nodes, the elements are ordered by left-to-right    group order; and</p> </li> <li> <p>for \\(\\textrm{Stream}\\) nodes with a parent stream, for every element    transferred on the parent stream, transfer the parent element first, then    transfer the corresponding data on the child stream. This data depends on    the \\(s\\) and \\(d\\) parameters of the \\(\\textrm{Stream}\\) node:</p> <ul> <li>\\(s \\in (\\textrm{Sync}, \\textrm{Flatten})\\), \\(d = 0\\): one element   on the parent stream corresponds to one element on the child stream;</li> <li>\\(s = \\textrm{Sync}\\), \\(d &gt; 0\\): one element on the parent stream   corresponds to one \\(d\\)-dimensional sequence on the child stream,   delimited by the most significant <code>last</code> bit added on top of the <code>last</code>   bits replicated from the parent stream;</li> <li>\\(s = \\textrm{Flatten}\\), \\(d &gt; 0\\): one element on the parent stream   corresponds to one \\(d\\)-dimensional sequence on the child stream,   delimited by the most significant <code>last</code> bit;</li> <li>\\(s \\in (\\textrm{Desync}, \\textrm{FlatDesync})\\), \\(d = 0\\): one   element on the parent stream corresponds to a user/context-defined number   of elements on the child stream (zero or more); and</li> <li>\\(s \\in (\\textrm{Desync}, \\textrm{FlatDesync})\\), \\(d &gt; 0\\): one   element on the parent stream corresponds to a user/context-defined number   of \\(d\\)-dimensional sequences on the child stream (zero or more).</li> </ul> </li> </ul> <p>Note</p> <p>This corresponds to depth-first preorder traversal of the logical stream type tree. It also corresponds to the order in which you would naturally write the data down.</p> <p>Sources may not assume that sinks will be able to handshake data in an order differing from the natural order defined above.</p> <p>Sinks may not assume that sources will be able to handshake data in an order differing from the natural order defined above.</p> <p>Example</p> <p>The above two rules, if adhered to by both source and sink, prevent inter-physical-stream deadlocks.</p> <p>Consider the following simple example:</p> <p>\\[C = \\textrm{Stream}(s = \\textrm{Sync}, d = 0, ...)\\\\ \\textrm{Group}(\\textrm{a}: C, \\textrm{b}: C)\\]</p> <p><code>[(a: 1, b: 2), (a: 3, b: 4)]</code></p> <p>Let's say the source follows the natural ordering rule and can't buffer anything. That is, it drives <code>1</code> on physical stream <code>a</code>, waits for the transfer to be acknowledged before driving <code>2</code> on physical stream <code>b</code>, then waits for that to be acknowledged before driving <code>3</code>, and so on. If the natural-ordering rule for sinks did not exist, the sink may try to wait for stream <code>b</code> to be validated before it will acknowledge <code>a</code>, which would in this case cause a deadlock.</p> <p>The reasoning also works the other way around. That is, if a sink will only acknowledge in the natural order, but the source is allowed to drive <code>2</code> on <code>b</code> and wait for its acknowledgement before driving <code>1</code> on <code>a</code>, a similar deadlock will occur.</p> <p>The above does not mean that a source isn't allowed to drive data on the two streams independently as fast as it can. The same thing goes for acknowledgement by a sink. If both source and sink support full out-of-order transferral of both streams, the elements can be transferred in any order. It just means that sources and sinks must be compatible with an opposite end that does not support out-of-order transferral.</p> <p>The above reasoning is particularly important for streams flowing in opposing directions. In this case, for a physical stream <code>x</code> naturally-ordered before another stream <code>y</code> flowing in the opposing direction, <code>x</code> acts as a request stream and <code>y</code> acts as its response. That is, the source of <code>x</code> may not assume that the response will come before it sends the request.</p>"},{"location":"tydispec/logical/#user-defined-signal-constraints","title":"User-defined signal constraints","text":"<p>Tydi places the following constraints on the user-defined signals.</p> <p>The user-defined signals flow exclusively in the source to sink direction.</p> <p>Note</p> <p>While physical streams can be reversed in order to transfer metadata in the sink to source direction, logical streams fundamentally describe dataflow in the source to sink direction. Therefore, if data needs to flow in the opposite direction as well, you should use a second logical stream.</p> <p>The reasoning behind this design choice is mostly practical in nature. Firstly, with the way the logical stream type is currently defined, unidirectional signals emerge naturally before the first stream node is opened, but reverse-direction signals do not. Therefore, additional nodes would be needed to describe this. Secondly, allowing signals to flow in both directions might be interpreted by users as a way for them to implement their own handshake method to use instead of or in addition to the handshakes of the Tydi physical streams. Most handshake methods break however when registers or clock domain crossings not specifically tailored for that particular handshake are inserted in between. With a purely unidirectional approach, latency bounds are not necessary for correctness, allowing tooling to automatically generate interconnect IP. Tydi does pose some constraints on such IP, however.</p> <p>Interconnect components such as register slices and clock domain crossings may interpret the signals as being asynchronous. Thus, a sink may not rely upon bit flips driven in the same cycle by the source from occurring in the same cycle at the sink.</p> <p>Note</p> <p>This allows clock domain crossings for the user-defined signals to reduce to simple synchronization registers.</p> <p>The latency of any signal travelling from source to sink must be less than or equal to the latency of the streams.</p> <p>Note</p> <p>This allows the user-defined signals to be used as a way to transfer quasi-constant values, such as the control register inputs for some kernel. As long as the constants are only mutated before the source sends the first stream transfer, the signals received by the sink are guaranteed to be stable by the time it receives the first transfer.</p> <p>Handshaking in the reverse direction may be done using a reversed stream. When the sink is done processing, it sends a transfer on this stream. This will necessarily be received by the source at a later point in time, which is then free to modify the user signals again.</p> <p>Note that slow-changing counter values (those that only increment or decrement slowly with respect to the involved clock domains) can be safely transferred using Gray code. Pulse/strobe signals can be safely transferred by the source toggling a user-defined signal whenever the strobe occurs, and the sink detecting the transitions in this signal.</p>"},{"location":"tydispec/notation/","title":"Notation","text":"<p>Note</p> <p>This technical specification of Tydi was written a few years ago before any real implementations using more advanced features of the spec were created. We are in the process of examining which parts of the specification may need to be revised. The majority of the content is, however, still relevant and correct.</p> <p>The Tydi specification uses a flavor of mathematical notation to formally represent the defined concepts and operations thereupon. The nonstandard part of this notation is established in this section.</p>"},{"location":"tydispec/notation/#nodes","title":"Nodes","text":"<p>The structures needed by the specification are complex to the point that simply using tuples becomes overly confusing. Therefore, we introduce a form of named tuple, which we will call a node (the term \"type\" would be more appropriate, but would be confusing within the context of this specification).</p> <p>The notation for a node is as follows:</p> <p>\\[\\textrm{NodeName}(...)\\]</p> <p>where \\(\\textrm{NodeName}\\) is a title case identifier unique within the specification, and \\(...\\) is a number of field names in some pattern. For example:</p> <p>\\[\\textrm{Fields}(N_1 : b_1, N_2 : b_2, ..., N_n : b_n)\\]</p> <p>A node carries with it implicit requirements on what the fields may be. Whenever an operation constructs a node, the operation is written in a way that these requirements are guaranteed by the preconditions of the operation.</p> <p>The field names of nodes are significant. When an operation depends on one of the fields of the node, the fields may be \"accessed\" by subscripting the field name. For instance, if \\(F\\) is a \\(\\textrm{Fields}\\) node, \\(F_n\\) represents the value for \\(n\\), and \\(F_N\\) represents the tuple consisting of \\(N_1, N_2, ..., N_n\\) of the node.</p> <p>When the field being indexed is clear from context, the field itself is usually omitted; for instance, using just \\(N\\) implies the same thing as \\(F_N\\) if there is only one \\(\\textrm{Fields}\\) node being discussed, and nothing else is using \\(N\\) for anything.</p> <p>Nodes may also be unpacked into differently named values using the following notation:</p> <p>Unpack \\(F'\\) into \\(\\textrm{Fields}(N'_1 : b'_1, N'_2 : b'_2, ..., N'_n : b'_n)\\).</p> <p>The following discussion may then use for instance \\(N'\\) to refer to \\(F'_N\\).</p> <p>In some cases, only some of the fields of a node need to have a certain value for the following discussion to apply. We will then write only those fields within the parentheses, prefixing the values with the name and an equals sign, followed by an ellipsis to signify the unconstrained fields. For example, \\(\\textrm{Fields}(n=2, ...)\\) signifies a \\(\\textrm{Fields}\\) node with exactly two \\(N\\) and two \\(b\\), but the values thereof are unconstrained.</p>"},{"location":"tydispec/notation/#functions","title":"Functions","text":"<p>Due to the highly generic nature of the specification, parts of it are described algorithmically. The algorithms are referred to as functions. Like functions in a typical programming language, they have a signature, written as follows:</p> <p>\\[\\textrm{functionName}(...) \\rightarrow \\textrm{ReturnType}\\]</p> <p>where \\(\\textrm{functionName}\\) is a camelcase identifier unique within the specification, \\(...\\) is a number of argument names in some pattern, and \\(\\textrm{ReturnType}\\) specifies what is returned, usually in the form of a node name.</p> <p>A function carries with it implicit requirements on what its parameters may be. Whenever an operation uses a function, the operation is written in a way that these requirements are guaranteed by the preconditions of the operation.</p>"},{"location":"tydispec/note/","title":"Note","text":"<p>Note</p> <p>This technical specification of Tydi was written a few years ago before any real implementations using more advanced features of the spec were created. We are in the process of examining which parts of the specification may need to be revised. The majority of the content is, however, still relevant and correct.</p>"},{"location":"tydispec/physical/","title":"Physical streams","text":"<p>Note</p> <p>This technical specification of Tydi was written a few years ago before any real implementations using more advanced features of the spec were created. We are in the process of examining which parts of the specification may need to be revised. The majority of the content is, however, still relevant and correct.</p> <p>A Tydi physical stream carries a stream of elements, dimensionality information for said elements, and (optionally) user-defined transfer information from a source to a sink. The contents of these three groups and to some extent the way in which they are transferred are defined in a parameterized way, to provide the necessary flexibility for the higher levels of this specification, and to give hardware developers the freedom to optimize their designs. Based on these parameters, this specification defines which signals must exist on the interface, and the significance of these signals.</p>"},{"location":"tydispec/physical/#parameters","title":"Parameters","text":"<p>A physical stream is parameterized as \\(\\textrm{PhysicalStream}(E, N, D, C, U)\\). The significance of these parameters is defined in the following subsections.</p> <p>Info</p> <p>The parameters are defined on the interfaces of the source and the sink rather than the stream between them, because the complexity parameter need not be the same on the source and sink. The others do.</p>"},{"location":"tydispec/physical/#element-content-e-and-usertransfer-content-u","title":"Element content (E) and user/transfer content (U)","text":"<p>\\(E\\) and \\(U\\) are of the form \\(\\textrm{Fields}(N_1 : b_1, N_2 : b_2, ..., N_n : b_n)\\), where \\(N\\) are names, \\(b\\) are positive integers representing bit counts, and \\(n\\) is a nonnegative integer, describing a list of \\(n\\) named bit vector signals.</p> <p>Info</p> <p>The element type can be given zero fields to make a \"null\" stream. Such streams can still be useful, as physical streams also carry metadata. The bit counts are however not allowed to be zero, because a lot of synthesis tools out there do not handle null ranges very well.</p> <p>The difference between the element content and the user/transfer content of a stream, is that a transfer may encode zero or more elements, but always encodes one instance of the user/transfer content.</p> <p>Info</p> <p>The user/transfer signals are intended for adding lower-level user-defined protocol signals to the stream, similar to the use of the <code>*USER</code> signals in AXI4. For instance, physical streams could be transferred over a network-on-chip-like structure by attaching routing information such as source and destination addresses through this method.</p> <p>The name of each field is a string consisting of letters, numbers, and/or underscores. It may be empty, represented in this specification as \\(\\varnothing\\).</p> <p>The name cannot start or end with an underscore.</p> <p>The name cannot start with a digit.</p> <p>Info</p> <p>It is illegal to start or end with an underscore or start with a number to prevent confusion when the name is prefixed to form the signal name, and for compatibility with VHDL.</p> <p>The name must be case-insensitively unique within the set of named fields.</p> <p>Note</p> <p>The identifier is case-insensitive because compatibility with VHDL is desired.</p> <p>\\(|\\textrm{Fields}(N_1 : b_1, N_2 : b_2, ..., N_n : b_n)|\\) is a shorthand defined to equal \\(\\sum_{i=1}^{n} b_i\\); that is, the sum of the field bit count over all fields in the element.</p>"},{"location":"tydispec/physical/#number-of-element-lanes-n","title":"Number of element lanes (N)","text":"<p>\\(N\\) must be an integer greater than or equal to one. The signals used for describing a data element are replicated this many times, allowing multiple elements to be transferred per stream handshake. Each replication is called a lane.</p>"},{"location":"tydispec/physical/#dimensionality-d","title":"Dimensionality (D)","text":"<p>\\(D\\) must be an integer greater than or equal to zero. It specifies the number of <code>last</code> bits needed to represent the data.</p> <p>Info</p> <p>Intuitively, each sequence nesting level adds one to this number. For instance, to stream two-dimensional sequences, two <code>last</code> bits are needed: one to mark the boundaries of the inner sequence, and one to mark the boundary of each two-dimensional sequence.</p>"},{"location":"tydispec/physical/#complexity-c","title":"Complexity (C)","text":"<p>\\(C\\) must be a nonempty list of nonnegative integers. It encodes the guarantees a source makes about how elements are transferred. Equivalently, it encodes the assumptions a sink can safely make.</p> <p>Info</p> Higher C Lower C Fewer guarantees made by source More guarantees made by source Source is easier to implement Source is harder to implement Sink can make fewer assumptions Sink can make more assumptions Sink is harder to implement Sink is easier to implement <p>C is usually specified as a period-separated list, like a version number or paragraph/secion number, because like those things, it is orderable.</p> <p>The complexity number carries the following intuitive significance.</p> \\(C\\) Description &lt; 8 Only one sequence can be terminated per transfer. &lt; 7 The indices of the active data lanes can be described with a simple range. &lt; 6 The range of active data lanes must always start with lane zero. &lt; 5 All lanes must be active for all but the last transfer of the innermost sequence. &lt; 4 The <code>last</code> flag cannot be postponed until after the transfer of the last element. &lt; 3 Innermost sequences must be transferred in consecutive cycles. &lt; 2 Whole outermost instances must be transferred in consecutive cycles. <p>The exact requirements imposed for each \\(C\\) can be found along with the unconditional signal requirements in later sections.</p> <p>The complexity levels and signals are defined such that a source with complexity \\(C_a\\) can be connected to a sink with complexity \\(C_b \\ge C_a\\). A complexity number is higher than another when the leftmost integer of either is greater, and lower when the leftmost integer is lower. If the leftmost integer is equal, the next integer is checked. If one complexity number has more entries than another, the shorter number is padded with zeros on the right.</p> <p>Info</p> <p>That is, it works a bit like a version number. The idea behind this is to allow future version of this specification (or any other kind of addition later) to insert new complexity levels between the ones defined here. For instance, 3 &lt; 3.1 &lt; 3.1.1 &lt; 3.2 &lt; 4.</p> <p>A stream is considered to be normalized when \\(C &lt; 4\\). At this complexity level, there is a one-to-one mapping between the transferred data and the actual transfers for any given \\(N\\). This is called the canonical representation of the data for a given \\(N\\).</p>"},{"location":"tydispec/physical/#signals","title":"Signals","text":"<p>A physical stream is comprised of the following signals.</p> Name Origin Purpose <code>valid</code> Source Stalling the data stream due to the source not being ready. <code>ready</code> Sink Stalling the data stream due to the sink not being ready. <code>data</code> Source Data transfer of \\(N\\) \\(|E|\\)-bit elements. <code>last</code> Source Indicating the last transfer for \\(D\\) levels of nested sequences. <code>stai</code> Source Start index; encodes the index of the first valid lane. <code>endi</code> Source End index; encodes the index of the last valid lane. <code>strb</code> Source Strobe; encodes individual lane validity for \\(C \\ge 8\\), empty sequences otherwise. <code>user</code> Source Additional control information carried along with the stream. <p>The <code>valid</code> and <code>ready</code> signals are scalars, while all the other signals are bit vectors with the following widths.</p> Name Width <code>valid</code> scalar <code>ready</code> scalar <code>data</code> \\(N \\times |E|\\) <code>last</code> \\(N \\times D\\) <code>stai</code> \\(\\lceil \\log_2{N} \\rceil\\) <code>endi</code> \\(\\lceil \\log_2{N} \\rceil\\) <code>strb</code> \\(N\\) <code>user</code> \\(|U|\\)"},{"location":"tydispec/physical/#clock","title":"Clock","text":"<p>All signals are synchronous to a single clock signal, shared between the source and sink.</p> <p>It is up to the user to manage clock domains and clock domain crossing where needed, and specify the edge sensitivity of the clock(s).</p>"},{"location":"tydispec/physical/#reset","title":"Reset","text":"<p>This specification places no constraints on the reset signal. The requirements on the <code>valid</code> and <code>ready</code> signals ensure that no transfers occur when either the source or the sink is held under reset, so the source, synchronicity, and sensitivity of the reset signal(s) can be chosen by the user.</p>"},{"location":"tydispec/physical/#detailed-signal-description","title":"Detailed signal description","text":""},{"location":"tydispec/physical/#valid-signal-description","title":"<code>valid</code> signal description","text":"<p>Info</p> <p>The <code>valid</code> signal has the same semantics as the <code>TVALID</code> AXI4-stream signal. These semantics are repeated here.</p> <p>The <code>valid</code> signal indicates the presence of a valid transfer payload of the other downstream signals. It is active-high.</p> <p>The state of the <code>valid</code> signal is always significant.</p> <p>Info</p> <p>That is, if the source is in some undefined or \"uninitialized\" state, <code>valid</code> must nonetheless be low.</p> <p>The downstream signals, including <code>valid</code>, must be stable (maintain their state) from the first active clock edge in which <code>valid</code> is asserted until acknowledgement of the transfer. Note that the validating and acknowledging clock edge can be one and the same if <code>ready</code> is already asserted during the first clock cycle; in this case there are no stability requirements.</p> <p>Info</p> <p>In other words, a transfer may not be cancelled or modified after validation. This allows a sink to start doing some sort of multicycle processing as soon as <code>valid</code> is asserted, only asserting <code>ready</code> when it is done, without having to worry about cancellation or changes in the transfer content. This prevents the need for extra holding registers or latches otherwise needed to keep the original transfer.</p> <p>When a transfer is acknowledged, either the next transfer is presented on the downstream signals and <code>valid</code> remains asserted, or <code>valid</code> is released.</p> <p>[\\(C &lt; 3\\)] <code>valid</code> may only be released when lane \\(N - 1\\) of the <code>last</code> signal in the acknowledged transfer is nonzero.</p> <p>[\\(C &lt; 2\\)] <code>valid</code> may only be released when lane \\(N - 1\\) of the <code>last</code> signal in the acknowledged transfer is all ones.</p> <p><code>valid</code> must be released while the source is being reset.</p> <p>Info</p> <p>This prevents spurious transfers when the sink has a different reset source.</p>"},{"location":"tydispec/physical/#ready-signal-description","title":"<code>ready</code> signal description","text":"<p>Info</p> <p>The <code>ready</code> signal has the same semantics as the <code>TREADY</code> AXI4-stream signal. These semantics are repeated here.</p> <p>The <code>ready</code> signal indicates acknowledgement of a transfer initiated through <code>valid</code>. It is active-high.</p> <p>The state of the <code>ready</code> signal is significant only while <code>valid</code> is asserted.</p> <p>Info</p> <p>That is, a source must never wait for <code>ready</code> to assert before it asserts <code>valid</code>. Doing so can lead to deadlock. However, a sink may wait for <code>valid</code> to assert before asserting <code>ready</code>.</p> <p>A transfer is considered \"handshaked\" when both <code>valid</code> and <code>ready</code> are asserted during the active clock edge of the clock domain common to the source and the sink.</p> <p><code>ready</code> must be released while the sink is being reset.</p> <p>Info</p> <p>This prevents transfers from being lost when the source has a different reset source.</p>"},{"location":"tydispec/physical/#data-signal-description","title":"<code>data</code> signal description","text":"<p>The <code>data</code> signal consists of \\(N\\) concatenated lanes, each carrying a number of data element fields, totaling to \\(|E|\\) bits per lane.</p> <p>The state of lane \\(i\\) in the <code>data</code> signal is significant only while <code>valid</code> is asserted and data lane \\(i\\) is active. Data lane \\(i\\) is considered active if and only if</p> <ul> <li>bit \\(i\\) of <code>strb</code> is asserted,</li> <li>the unsigned integer interpretation of <code>endi</code> is greater than or equal to    \\(i\\), and</li> <li>the unsigned integer interpretation of <code>stai</code> is less than or equal to    \\(i\\).</li> </ul> <p>Note</p> <p>The redundancy of the <code>endi</code> and <code>stai</code> signals given the presence of the <code>strb</code> signal (only applicable for \\(C \\ge 7\\)) has to do with the rule that it must always be possible to connect a source with low complexity to a sink with high complexity. That is, while a source that desires individual control over the lanes and thus has \\(C \\ge 7\\) would probably always drive <code>endi</code> to \\(N-1\\) and <code>stai</code> to 0, a sink with complexity \\(C \\ge 7\\) still needs to accept input from sources that do use <code>endi</code> and <code>stai</code>.</p> <p>The overhead incurred by this should be negligible in practice. First of all, because \\(C \\ge 7\\) with significant \\(N\\) will be quite large to begin with, so managing two additional signals of size \\(\\lceil \\log_2{N} \\rceil\\) probably doesn't matter much. Secondly, in most cases, constant propagation will remove the unneeded <code>endi</code> and <code>stai</code> signals whenever both source and sink have \\(C \\ge 7\\). Finally, even if the above fails, going from <code>stai</code> + <code>endi</code> + <code>strb</code> to the internal lane enable signals in a sink is trivial for modern FPGAs and realistic \\(N\\), as the less-than-equal and greater-than-equal comparisons fit in a single 6-LUT up to and including \\(N = 64\\), resulting in just three decoding LUTs per lane (one for <code>stai</code>, one for <code>endi</code>, and one 3-input AND gate to merge the outputs of the first two and the <code>strb</code> bit).</p> <p>The significant lanes are interpreted in order of increasing index for each transfer.</p>"},{"location":"tydispec/physical/#last-signal-description","title":"<code>last</code> signal description","text":"<p>The <code>last</code> signal consists of <code>N</code> concatenated lanes, each carrying a termination bit for each nested sequence represented by the physical stream. The <code>last</code> bit for lane \\(i\\) and dimension \\(j\\) (i.e., bit \\(i \\cdot D + j\\)) being asserted indicates completion of a sequence with nesting level \\(D - j - 1\\), containing all elements streamed between the previous lane/transfer this occured for dimension \\(j' \\ge j\\) (or system reset, if never) exclusively and this point inclusively, where nesting level is defined to be 0 for the outermost sequence, 1 for its inner sequence, up to \\(D - 1\\) for the innermost sequence. It is active-high.</p> <p>How to use last</p> <p>For example, one way to represent the value <code>[\"Hello\", \"World\"], [\"Tydi\", \"is\", \"nice\"], [\"\"], []</code> with \\(N = 6, C \\ge 8\\) is as follows. Note that \\(D = 2\\) follows from the data type, \\(|E|\\) depends on the character encoding, and the example does not depend on \\(U\\). <pre><code>reset released here\n        |                      transfer --&gt;\n        v      A              B              C              D\n\nlast    \"000100000000\" \"000011000000\" \"000001000100\" \"000010010000\"\ndata       \"WolleH\"       \"yTdlro\"       \"insiid\"       \"----ec\"\nstrb       \"111111\"       \"111111\"       \"111111\"       \"000011\"\n\n        .------------. .------------. .------------. .------------.\n      0 | data:  'H' | | data:  'o' | | data:  'd' | | data:  'c' |\n        | last:  0 0 | | last:  0 0 | | last:  0 0 | | last:  0 0 |\n        |------------| |------------| |------------| |------------|\n      1 | data:  'e' | | data:  'r' | | data:  'i' | | data:  'e' |\n        | last:  0 0 | | last:  0 0 | | last:  0 1 | | last:  0 0 |\n        |------------| |------------| |------------| |------------|\nlane  2 | data:  'l' | | data:  'l' | | data:  'i' | | data:   -  |\nindex   | last:  0 0 | | last:  0 0 | | last:  0 0 | | last:  0 1 |\n  |     |------------| |------------| |------------| |------------|\n  v   3 | data:  'l' | | data:  'd' | | data:  's' | | data:   -  |\n        | last:  0 0 | | last:  1 1 | | last:  0 1 | | last:  1 0 |\n        |------------| |------------| |------------| |------------|\n      4 | data:  'o' | | data:  'T' | | data:  'n' | | data:   -  |\n        | last:  0 1 | | last:  0 0 | | last:  0 0 | | last:  1 1 |\n        |------------| |------------| |------------| |------------|\n      5 | data:  'W' | | data:  'y' | | data:  'i' | | data:   -  |\n        | last:  0 0 | | last:  0 0 | | last:  0 0 | | last:  1 0 |\n        '------------' '------------' '------------' '------------'\n</code></pre> <code>\"Hello\"</code> is delimited by the reset condition and the asserted <code>last</code> bit in transfer A, lane 4, dimension 0 (innermost). <code>\"World\"</code> is delimited by the aforementioned and the <code>last</code> bit in transfer B, lane 3, also for dimension 0. The <code>last</code> bit for B3/dimension 1 is also asserted, which delimits <code>[\"Hello\", \"World\"]</code> along with the reset condition; both the <code>\"Hello\"</code> and <code>\"World\"</code> sequence are fully contained by the delimited portion of the stream, so the outer sequence has those as its two entries. <code>\"Tydi\"</code> is delimited by B3 and C1, <code>\"is\"</code> by C1 and C3, and <code>\"nice\"</code> by C3 and D2 for dimension 0. Note that the D2 is postponed beyond the last element (D1) by means of deactivating data lane D2. The <code>last</code> flag for the surrounding sequence is similarly postponed to D3; note though that data lane D3 must be inactive, or the last bit for D3/dimension 0 must be asserted for the data stream to be legal. The next <code>\"\"</code> is delimited by D3/dimension 1 and D4/dimension 0, and <code>[\"\"]</code> is delimited by D3 and D4 for dimension 1. The final <code>[]</code> is delimited by D4 and D5 for dimension 1. It does not contain an inner sequence item because D5/dimension 0 is not asserted, so the outer sequence is empty.</p> <p>The state of lane \\(i\\) in the <code>data</code> signal is significant only while <code>valid</code> is asserted.</p> <p>Info</p> <p>Note that the validity of the <code>last</code> lanes is thus not controlled by which data lanes are active. This allows sequences to be terminated without sending an element; this is in fact required in order to send empty sequences, but also allows postponing the end-of-sequence marker until after the last element (if complexity allows) as the previous example shows.</p> <p>It is illegal to assert a <code>last</code> bit for dimension \\(j\\) without first terminating all dimensions \\(j' &lt; j\\), if any data lanes were active since the previous assertion of a <code>last</code> bit for dimension 0.</p> <p>How to use last</p> <p>For example, the following is illegal because of the above:</p> <pre><code>        .------------.\n      0 | data:  '1' |\n        | last:  0 0 |\n        |------------|\n      1 | data:  '2' |\n        | last:  0 1 |\n        |------------|\nlane  2 | data:  '3' |\nindex   | last:  0 0 |\n  |     |------------|\n  v   3 | data:  '4' |\n        | last:  1 0 |\n        |------------|\n      4 | data:  '5' |\n        | last:  0 0 |\n        |------------|\n      5 | data:  '6' |\n        | last:  1 1 |\n        '------------'\n</code></pre> <p>An argument could be made that this encodes <code>[[1, 2], 3, 4], [[5, 6]]</code>, but allowing this interpretation would make the stream significantly less type-safe, and there would be no way to encode non-sequence elements before the last inner sequence in the outer sequence without introducing a <code>start</code> signal as well.</p> <p>An argument could also be made that this encodes <code>[[1, 2]], [[3, 4, 5, 6]]</code>, because the <code>last</code> flag delimiting <code>[1, 2]</code> falls within the first outer sequence and the <code>last</code> flag delimiting <code>[3, 4, 5, 6]</code> falls within the second. However, this would unnecessarily complicate sink logic, make manual interpretation of the data structure more context-sensitive, and so on.</p> <p>One could also argue that it encodes <code>[[1, 2]], [[5, 6]]</code>, because <code>3</code> and <code>4</code> are not enclosed by any inner sequence, but then it makes more sense to just deactivate the lanes.</p> <p>Ultimately, this representation is ambiguous or at least leads to confusion, and is therefore illegal.</p> <p>[\\(C &lt; 8\\)] All last bits for lanes 0 to \\(N - 2\\) inclusive must be driven low by the source, and may be ignored by the sink.</p> <p>Info</p> <p>The above rule ultimately means that the <code>last</code> information is transferred on a transfer basis instead of on element basis, similar to AXI4-stream. This can significantly decrease decoding complexity, but only allows one innermost sequence to be transferred per cycle regardless of \\(N\\) and the length of the sequence.</p> <p>[\\(C &lt; 4\\)] It is illegal to assert a <code>last</code> bit for dimension \\(j\\) without also asserting the <code>last</code> bits for dimensions \\(j' &lt; j\\) in the same lane.</p> <p>[\\(C &lt; 4\\)] It is illegal to assert the <code>last</code> bit for dimension 0 when the respective data lane is inactive, except for empty sequences.</p> <p>Info</p> <p>The above two rules mean that the <code>last</code> flags cannot be postponed.</p>"},{"location":"tydispec/physical/#stai-signal-description","title":"<code>stai</code> signal description","text":"<p>The <code>stai</code> signal (start index) is used to deactivate data lanes with an index lower than the encoded binary number. It is a bit vector of size \\(\\lceil \\log_2{N} \\rceil\\) to encode the full index range.</p> <p>The state of the <code>stai</code> signal is significant only while <code>valid</code> is asserted.</p> <p>It is illegal to drive <code>stai</code> to the value \\(N\\) or greater.</p> <p>Info</p> <p>This implies that <code>stai</code> cannot be used to disable the last lane.</p> <p>[\\(C &lt; 6\\)] <code>stai</code> must always be driven to 0 by the source, and may be ignored by the sink.</p>"},{"location":"tydispec/physical/#endi-signal-description","title":"<code>endi</code> signal description","text":"<p>The <code>endi</code> signal (end index) is used to deactivate data lanes with an index greater than the encoded binary number. It is a bit vector of size \\(\\lceil \\log_2{N} \\rceil\\) to encode the full index range.</p> <p>Info</p> <p>Note that <code>endi</code> cannot be used to disable the first lane.</p> <p>The state of the <code>endi</code> signal is significant only while <code>valid</code> is asserted.</p> <p>It is illegal to drive <code>endi</code> to the value \\(N\\) or greater.</p> <p>Info</p> <p>This would semantically not be different from driving \\(N - 1\\), so there is no reason to burden the sink logic by allowing this case.</p> <p>It is illegal to drive <code>endi</code> to a value less than <code>stai</code>.</p> <p>Info</p> <p>This would essentially encode a VHDL null range, which, if allowed, could be used to encode empty sequences. However, detecting this condition is relatively hard on FPGA resources (timing in particular), typically requiring a carry chain for \\(N &gt; 8\\). Instead, use <code>strb</code> for this purpose; at lower complexities all <code>strb</code> bits must be equal, so only a single bit has to be checked to determine whether a transfer carries any data.</p> <p>[\\(C &lt; 5\\)] <code>endi</code> must be driven to \\(N - 1\\) by the source when <code>last</code> is zero, and may be ignored by the sink in this case.</p> <p>Info</p> <p>Together with the other complexity rules up to this level, this means that all lanes must be used for all but the last transfer containing elements for the innermost sequence. This furthermore implies that the element with innermost index \\(i\\) is always transferred on data lane \\(i \\mod N\\).</p>"},{"location":"tydispec/physical/#strb-signal-description","title":"<code>strb</code> signal description","text":"<p>The <code>strb</code> signal (strobe) is used to deactivate individual data lanes. It is a bit vector of size \\(N\\). When a <code>strb</code> bit is low, the associated data lane is deactivated.</p> <p>Info</p> <p>Note that the opposite (<code>strb</code> high -&gt; activated) is not necessarily true due to <code>endi</code> and <code>stai</code>.</p> <p>The state of the <code>strb</code> signal is significant only while <code>valid</code> is asserted.</p> <p>[\\(C &lt; 8\\)] All <code>strb</code> bits must be driven to the same value by the source. The sink only needs to interpret one of the bits.</p> <p>Info</p> <p>This effectively reduces the <code>strb</code> signal to a single bit indicating whether the transfer is empty (low) or not (high), as it is illegal to deactivate all data lanes by driving <code>endi</code> &lt; <code>stai</code>.</p>"},{"location":"tydispec/physical/#user-signal-description","title":"<code>user</code> signal description","text":"<p>The <code>user</code> signal is the concatenation of a number of user-specified fields, carrying additional transfer-oriented information. The significance of this is user-defined.</p> <p>The state of the <code>user</code> signal is not significant when <code>valid</code> is not asserted.</p> <p>Info</p> <p>The opposite is not necessarily true; it is up to the user's specifications if (part of) the user signal can be insignificant despite <code>valid</code> being asserted.</p>"},{"location":"tydispec/physical/#signal-omission","title":"Signal omission","text":"<p>Not all signals are always needed. The following table shows the condition for a signal to be relevant. If the condition is false, the signal may be omitted on the interface. When two interfaces with differing but compatible complexities are connected together, the default value specified in the table below must be driven for the omitted signals.</p> Name Condition Default <code>valid</code> see below <code>'1'</code> <code>ready</code> see below <code>'1'</code> <code>data</code> \\(|E| &gt; 0\\) all <code>'0'</code> <code>last</code> \\(D \\ge 1\\) all <code>'1'</code> <code>stai</code> \\(C \\ge 6 \\wedge N &gt; 1\\) 0 <code>endi</code> \\((C \\ge 5 \\vee D \\ge 1) \\wedge N &gt; 1\\) \\(N-1\\) <code>strb</code> \\(C \\ge 7 \\vee D \\ge 1\\) all <code>'1'</code> <code>user</code> \\(|U| &gt; 0\\) all <code>'0'</code> <p><code>valid</code> may be omitted for sources that are always valid.</p> <p>Info</p> <p>For example, a constant or status signal source (the latter must be valid during reset as well for this to apply).</p> <p><code>ready</code> may be omitted for sinks that never block.</p> <p>Info</p> <p>For example, a sink that voids all incoming data in order to measure performance of the source.</p>"},{"location":"tydispec/physical/#interface-conventions","title":"Interface conventions","text":"<p>Streams may be named, in order to prevent name conflicts due to multiple streams existing within the same namespace. Such a name is to be prefixed to the signal names using a double underscore.</p> <p>Info</p> <p>Double underscores are used as a form of unambiguous hierarchy separation to allow user-specified field names in the logical stream types (defined later) to contain (non-consecutive) underscores without risk of name conflicts.</p> <p>The canonical representation for the <code>data</code> and <code>user</code> signals is the LSB-first concatenation of the contained fields. For \\(N &gt; 1\\), the lanes are concatenated LSB first, such that the lane index is major and the field index is minor.</p> <p>Where applicable, the signals must be listed in the following order: <code>dn</code>, <code>up</code>, <code>valid</code>, <code>ready</code>, <code>data</code>, <code>last</code>, <code>stai</code>, <code>endi</code>, <code>strb</code>, <code>user</code> (<code>dn</code> and <code>up</code> are part of the alternative representation defined below).</p> <p>Info</p> <p>This is mostly just a consistency thing, primarily because it helps to get used to a single ordering when interpreting simulation waveforms. It may also simplify tooling.</p> <p>The signal names must be lowercase.</p> <p>Info</p> <p>This is for interoperability between languages that differ in case sensitivity.</p>"},{"location":"tydispec/physical/#alternative-representation","title":"Alternative representation","text":"<p>To improve code readability in hardware definition languages supporting array and aggregate constructs (record, struct, ...), the following changes are permissible. However, it is recommended to fall back to the conventions above for interoperability with other streamlets on the \"outer\" interfaces of an IP block.</p> <ul> <li> <p><code>valid</code>, <code>data</code>, <code>last</code>, <code>stai</code>, <code>endi</code>, <code>strb</code>, and <code>user</code> may be bundled    in an aggregate type named <code>&lt;stream-name&gt;__dn__type</code> with signal name    <code>&lt;stream-name&gt;__dn</code> (<code>dn</code> is short for \"downstream\").</p> </li> <li> <p><code>ready</code> may be \"bundled\" in an aggregate type named    <code>&lt;stream-name&gt;__up__type</code> with signal name <code>&lt;stream-name&gt;__up</code> for symmetry    (<code>up</code> is short for \"upstream\").</p> </li> <li> <p>If the language allows for signal direction reversal within a bundle, all    stream signals may also be bundled into a single type named    <code>&lt;stream-name&gt;__type</code>, with <code>ready</code> in the reverse direction.</p> </li> <li> <p>The data and user fields may be bundled in aggregate types named    <code>&lt;stream-name&gt;__data__type</code> and <code>&lt;stream-name&gt;__user__type</code> respectively.    The <code>data</code> signal becomes an array of <code>&lt;stream-name&gt;__data__type</code>s from 0 to    \\(N - 1\\) if \\(N &gt; 1\\) or when otherwise desirable.</p> </li> <li> <p>Data and user fields consisting of a single bit may be interpreted as either    a bit vector of size one or a scalar bit depending on context.</p> </li> <li> <p>Fields with a common double-underscore-delimited prefix may be aggregated    recursively using <code>&lt;stream-name&gt;__data__&lt;common-prefix&gt;__type</code>, in such a    way that the double underscores in the canonical signal name are essentially    replaced with the hierarchy separator of the hardware definition language.</p> </li> </ul>"},{"location":"tydispec/physical/#arrays-vectors-and-concatenations","title":"Arrays, vectors, and concatenations","text":"<p>Where applicable, the bitrange for bit vector signals is always <code>n-1 downto 0</code>, where <code>n</code> is the number of bits in the signal.</p> <p>Concatenations of bit vector signals are done LSB-first.</p> <p>Info</p> <p>That is, lower indexed entries use lower bit indices and thus occur on the right-hand side when the bit vector is written as a binary number. Note that this results in the inverse order when using the concatenation operator in VHDL (and possibly other languages). LSB-first order is chosen because it is more intuitive when indexing the vector. Ultimately this is just a convention.</p> <p>Where applicable, the range for arrays is always <code>0 to n-1</code>, where <code>n</code> is the number of entries in the array.</p> <p>Info</p> <p>This is the more natural order for array-like structures, actually putting the first entry on the left-hand side.</p>"}]}